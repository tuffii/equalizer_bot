import * as ServerCore from '@var3n1k/server-core';
import * as Dependencies from './__dependencies.js';
type BotClientInfo = Awaited<ReturnType<Dependencies.Telegraf.Telegraf['telegram']['getMe']>>;
type AnyEventContext = Dependencies.Telegraf.Context;
type AnyMessageContext = Exclude<AnyEventContext['message'], undefined>;
interface IAnyMessage {
    readonly Context: AnyMessageContext;
    readonly Content: string;
    readonly Chat: Exclude<AnyMessageContext['chat'], undefined>;
    readonly Author: Exclude<AnyMessageContext['from'], undefined>;
}
type AnyMessageEvent = (eventContext: AnyEventContext, message: IAnyMessage['Context'], messageContent: IAnyMessage['Content'], messageChat: IAnyMessage['Chat'], messageAuthor: IAnyMessage['Author']) => ServerCore.Engine.Module.Types.Promise.Promisable<void>;
type PrivateMessageContext = AnyMessageContext;
interface IPrivateMessage {
    readonly Context: PrivateMessageContext;
    readonly Content: string;
    readonly Chat: Exclude<PrivateMessageContext['chat'], undefined>;
    readonly Author: Exclude<PrivateMessageContext['from'], undefined>;
}
type PrivateMessageEvent = (eventContext: AnyEventContext, message: IPrivateMessage['Context'], messageContent: IPrivateMessage['Content'], messageChat: IPrivateMessage['Chat'], messageAuthor: IPrivateMessage['Author']) => ServerCore.Engine.Module.Types.Promise.Promisable<void>;
type PublicChatMessageContext = AnyMessageContext;
interface IPublicChatMessage {
    readonly Context: PublicChatMessageContext;
    readonly Content: string;
    readonly Chat: Exclude<PublicChatMessageContext['chat'], undefined>;
    readonly Author: Exclude<PublicChatMessageContext['from'], undefined>;
}
type PublicChatMessageEvent = (eventContext: AnyEventContext, message: IPublicChatMessage['Context'], messageContent: IPublicChatMessage['Content'], messageChat: IPublicChatMessage['Chat'], messageAuthor: IPublicChatMessage['Author']) => ServerCore.Engine.Module.Types.Promise.Promisable<void>;
interface IAnyAttachment {
    readonly Context: IAnyMessage['Context'];
    readonly PhoneAttachment: IAnyMessage['Content'];
    readonly LocationAttachment: {
        readonly Latitude: number;
        readonly Longitude: number;
    };
    readonly ChatAttachment: {
        readonly ID: IAnyMessage['Chat']['id'];
    };
    readonly UserAttachment: {
        readonly ID: IAnyMessage['Author']['id'];
    };
    readonly Chat: IAnyMessage['Chat'];
    readonly Author: IAnyMessage['Author'];
}
type AnyAttachmentEvent<AttachmentType extends IPrivateAttachment['PhoneAttachment' | 'LocationAttachment' | 'ChatAttachment' | 'UserAttachment']> = (eventContext: AnyEventContext, message: IAnyAttachment['Context'], attachment: AttachmentType, attachmentChat: IAnyAttachment['Chat'], attachmentAuthor: IAnyAttachment['Author']) => ServerCore.Engine.Module.Types.Promise.Promisable<void>;
interface IPrivateAttachment {
    readonly Context: IPrivateMessage['Context'];
    readonly PhoneAttachment: IPrivateMessage['Content'];
    readonly LocationAttachment: {
        readonly Latitude: number;
        readonly Longitude: number;
    };
    readonly ChatAttachment: {
        readonly ID: IPrivateMessage['Chat']['id'];
    };
    readonly UserAttachment: {
        readonly ID: IPrivateMessage['Author']['id'];
    };
    readonly Chat: IPrivateMessage['Chat'];
    readonly Author: IPrivateMessage['Author'];
}
type PrivateAttachmentEvent<AttachmentType extends IPrivateAttachment['PhoneAttachment' | 'LocationAttachment' | 'ChatAttachment' | 'UserAttachment']> = (eventContext: AnyEventContext, message: IPrivateAttachment['Context'], attachment: AttachmentType, attachmentChat: IPrivateAttachment['Chat'], attachmentAuthor: IPrivateAttachment['Author']) => ServerCore.Engine.Module.Types.Promise.Promisable<void>;
interface IPublicChatAttachment {
    readonly Context: IPublicChatMessage['Context'];
    readonly PhoneAttachment: IPublicChatMessage['Content'];
    readonly LocationAttachment: {
        readonly Latitude: number;
        readonly Longitude: number;
    };
    readonly ChatAttachment: {
        readonly ID: IPublicChatMessage['Chat']['id'];
    };
    readonly UserAttachment: {
        readonly ID: IPublicChatMessage['Author']['id'];
    };
    readonly Chat: IPublicChatMessage['Chat'];
    readonly Author: IPublicChatMessage['Author'];
}
type PublicChatAttachmentEvent<AttachmentType extends IPublicChatAttachment['PhoneAttachment' | 'LocationAttachment' | 'ChatAttachment' | 'UserAttachment']> = (eventContext: AnyEventContext, message: IPublicChatAttachment['Context'], attachment: AttachmentType, attachmentChat: IPublicChatAttachment['Chat'], attachmentAuthor: IPublicChatAttachment['Author']) => ServerCore.Engine.Module.Types.Promise.Promisable<void>;
type AnyPhoneAttachmentEvent = AnyAttachmentEvent<IAnyAttachment['PhoneAttachment']>;
type PrivatePhoneAttachmentEvent = PrivateAttachmentEvent<IPrivateAttachment['PhoneAttachment']>;
type PublicChatPhoneAttachmentEvent = PublicChatAttachmentEvent<IPublicChatAttachment['PhoneAttachment']>;
type AnyLocationAttachmentEvent = AnyAttachmentEvent<IAnyAttachment['LocationAttachment']>;
type PrivateLocationAttachmentEvent = PrivateAttachmentEvent<IPrivateAttachment['LocationAttachment']>;
type PublicChatLocationAttachmentEvent = PublicChatAttachmentEvent<IPublicChatAttachment['LocationAttachment']>;
type AnyChatAttachmentEvent = AnyAttachmentEvent<IAnyAttachment['ChatAttachment']>;
type PrivateChatAttachmentEvent = PrivateAttachmentEvent<IPrivateAttachment['ChatAttachment']>;
type PublicChatChatAttachmentEvent = PublicChatAttachmentEvent<IPublicChatAttachment['ChatAttachment']>;
type AnyUserAttachmentEvent = AnyAttachmentEvent<IAnyAttachment['UserAttachment']>;
type PrivateUserAttachmentEvent = PrivateAttachmentEvent<IPrivateAttachment['UserAttachment']>;
type PublicChatUserAttachmentEvent = PublicChatAttachmentEvent<IPublicChatAttachment['UserAttachment']>;
type AnyButtonInteractionContext = Exclude<AnyEventContext['callbackQuery'], undefined>;
interface IAnyButtonInteraction {
    readonly Context: AnyButtonInteractionContext;
    readonly Data: string;
    readonly Chat: Exclude<AnyEventContext['chat'], undefined>;
    readonly Author: Exclude<AnyButtonInteractionContext['from'], undefined>;
}
type AnyButtonInteractionEvent = (eventContext: AnyEventContext, action: IAnyButtonInteraction['Context'], actionData: IAnyButtonInteraction['Data'], actionChat: IAnyButtonInteraction['Chat'], actionAuthor: IAnyButtonInteraction['Author']) => ServerCore.Engine.Module.Types.Promise.Promisable<void>;
type PrivateButtonInteractionContext = AnyButtonInteractionContext;
interface IPrivateButtonInteraction {
    readonly Context: PrivateButtonInteractionContext;
    readonly Data: string;
    readonly Chat: Exclude<AnyEventContext['chat'], undefined>;
    readonly Author: Exclude<PrivateButtonInteractionContext['from'], undefined>;
}
type PrivateButtonInteractionEvent = (eventContext: AnyEventContext, action: IPrivateButtonInteraction['Context'], actionData: IPrivateButtonInteraction['Data'], actionChat: IPrivateButtonInteraction['Chat'], actionAuthor: IPrivateButtonInteraction['Author']) => ServerCore.Engine.Module.Types.Promise.Promisable<void>;
type PublicChatButtonInteractionContext = AnyButtonInteractionContext;
interface IPublicChatButtonInteraction {
    readonly Context: PublicChatButtonInteractionContext;
    readonly Data: string;
    readonly Chat: Exclude<AnyEventContext['chat'], undefined>;
    readonly Author: Exclude<PublicChatButtonInteractionContext['from'], undefined>;
}
type PublicChatButtonInteractionEvent = (eventContext: AnyEventContext, action: IPublicChatButtonInteraction['Context'], actionData: IPublicChatButtonInteraction['Data'], actionChat: IPublicChatButtonInteraction['Chat'], actionAuthor: IPublicChatButtonInteraction['Author']) => ServerCore.Engine.Module.Types.Promise.Promisable<void>;
type AnySlashCommandContext = Exclude<AnyEventContext['message'], undefined>;
interface IAnySlashCommand {
    readonly Context: AnySlashCommandContext;
    readonly Name: string;
    readonly Arguments: Array<string>;
    readonly Query: string;
    readonly Chat: Exclude<AnySlashCommandContext['chat'], undefined>;
    readonly Author: Exclude<AnySlashCommandContext['from'], undefined>;
}
type AnySlashCommandEvent = (eventContext: AnyEventContext, message: IAnySlashCommand['Context'], commandName: IAnySlashCommand['Name'], commandArguments: IAnySlashCommand['Arguments'], commandQuery: IAnySlashCommand['Query'], commandChat: IAnySlashCommand['Chat'], commandAuthor: IAnySlashCommand['Author']) => ServerCore.Engine.Module.Types.Promise.Promisable<void>;
type PrivateSlashCommandContext = AnySlashCommandContext;
interface IPrivateSlashCommand {
    readonly Context: PrivateSlashCommandContext;
    readonly Name: string;
    readonly Arguments: Array<string>;
    readonly Query: string;
    readonly Chat: Exclude<PrivateSlashCommandContext['chat'], undefined>;
    readonly Author: Exclude<PrivateSlashCommandContext['from'], undefined>;
}
type PrivateSlashCommandEvent = (eventContext: AnyEventContext, message: IPrivateSlashCommand['Context'], commandName: IPrivateSlashCommand['Name'], commandArguments: IPrivateSlashCommand['Arguments'], commandQuery: IPrivateSlashCommand['Query'], commandChat: IPrivateSlashCommand['Chat'], commandAuthor: IPrivateSlashCommand['Author']) => ServerCore.Engine.Module.Types.Promise.Promisable<void>;
type PublicChatSlashCommandContext = AnySlashCommandContext;
interface IPublicChatSlashCommand {
    readonly Context: PublicChatSlashCommandContext;
    readonly Name: string;
    readonly Arguments: Array<string>;
    readonly Query: string;
    readonly Chat: Exclude<PublicChatSlashCommandContext['chat'], undefined>;
    readonly Author: Exclude<PublicChatSlashCommandContext['from'], undefined>;
}
type PublicChatSlashCommandEvent = (eventContext: AnyEventContext, message: IPublicChatSlashCommand['Context'], commandName: IPublicChatSlashCommand['Name'], commandArguments: IPublicChatSlashCommand['Arguments'], commandQuery: IPublicChatSlashCommand['Query'], commandChat: IPublicChatSlashCommand['Chat'], commandAuthor: IPublicChatSlashCommand['Author']) => ServerCore.Engine.Module.Types.Promise.Promisable<void>;
export interface IEventHandlerFunction {
    readonly Message: {
        readonly Private: PrivateMessageEvent;
        readonly Public: {
            readonly Chat: PublicChatMessageEvent;
        };
    };
    readonly Attachment: {
        readonly Phone: {
            readonly Private: PrivatePhoneAttachmentEvent;
            readonly Public: {
                readonly Chat: PublicChatPhoneAttachmentEvent;
            };
        };
        readonly Location: {
            readonly Private: PrivateLocationAttachmentEvent;
            readonly Public: {
                readonly Chat: PublicChatLocationAttachmentEvent;
            };
        };
        readonly Chat: {
            readonly Private: PrivateChatAttachmentEvent;
            readonly Public: {
                readonly Chat: PublicChatChatAttachmentEvent;
            };
        };
        readonly User: {
            readonly Private: PrivateUserAttachmentEvent;
            readonly Public: {
                readonly Chat: PublicChatUserAttachmentEvent;
            };
        };
    };
    readonly Action: {
        readonly Component: {
            readonly Button: {
                readonly Private: PrivateButtonInteractionEvent;
                readonly Public: {
                    readonly Chat: PublicChatButtonInteractionEvent;
                };
            };
        };
    };
    readonly Command: {
        readonly Slash: {
            readonly Private: PrivateSlashCommandEvent;
            readonly Public: {
                readonly Chat: PublicChatSlashCommandEvent;
            };
        };
    };
}
type AwaitedPrivateMessage = Promise<Parameters<PrivateMessageEvent> | undefined>;
type AwaitedPublicChatMessage = Promise<Parameters<PublicChatMessageEvent> | undefined>;
type AwaitedPrivatePhoneAttachment = Promise<Parameters<PrivatePhoneAttachmentEvent> | undefined>;
type AwaitedPublicChatPhoneAttachment = Promise<Parameters<PublicChatPhoneAttachmentEvent> | undefined>;
type AwaitedPrivateLocationAttachment = Promise<Parameters<PrivateLocationAttachmentEvent> | undefined>;
type AwaitedPublicChatLocationAttachment = Promise<Parameters<PublicChatLocationAttachmentEvent> | undefined>;
type AwaitedPrivateChatAttachment = Promise<Parameters<PrivateChatAttachmentEvent> | undefined>;
type AwaitedPublicChatChatAttachment = Promise<Parameters<PublicChatChatAttachmentEvent> | undefined>;
type AwaitedPrivateUserAttachment = Promise<Parameters<PrivateUserAttachmentEvent> | undefined>;
type AwaitedPublicChatUserAttachment = Promise<Parameters<PublicChatUserAttachmentEvent> | undefined>;
type AwaitedPrivateButtonInteraction = Promise<Parameters<PrivateButtonInteractionEvent> | undefined>;
type AwaitedPublicChatButtonInteraction = Promise<Parameters<PublicChatButtonInteractionEvent> | undefined>;
interface ITelegramAwaitedGetter {
    readonly Message: {
        readonly Private: <TimeLimit extends number | undefined>(chatId: IPublicChatMessage['Chat']['id'], authorId: IPublicChatMessage['Author']['id'], timeLimit: TimeLimit) => TimeLimit extends number ? AwaitedPrivateMessage : Promise<Exclude<Awaited<AwaitedPrivateMessage>, null | undefined>>;
        readonly Public: {
            readonly Chat: <TimeLimit extends number | undefined>(chatId: IPublicChatMessage['Chat']['id'], authorId: IPublicChatMessage['Author']['id'], timeLimit: TimeLimit) => TimeLimit extends number ? AwaitedPublicChatMessage : Promise<Exclude<Awaited<AwaitedPublicChatMessage>, null | undefined>>;
        };
    };
    readonly Attachment: {
        readonly Phone: {
            readonly Private: <TimeLimit extends number | undefined>(chatId: IPublicChatAttachment['Chat']['id'], authorId: IPublicChatAttachment['Author']['id'], timeLimit: TimeLimit) => TimeLimit extends number ? AwaitedPrivatePhoneAttachment : Promise<Exclude<Awaited<AwaitedPrivatePhoneAttachment>, null | undefined>>;
            readonly Public: {
                readonly Chat: <TimeLimit extends number | undefined>(chatId: IPublicChatAttachment['Chat']['id'], authorId: IPublicChatAttachment['Author']['id'], timeLimit: TimeLimit) => TimeLimit extends number ? AwaitedPublicChatPhoneAttachment : Promise<Exclude<Awaited<AwaitedPublicChatPhoneAttachment>, null | undefined>>;
            };
        };
        readonly Location: {
            readonly Private: <TimeLimit extends number | undefined>(chatId: IPublicChatAttachment['Chat']['id'], authorId: IPublicChatAttachment['Author']['id'], timeLimit: TimeLimit) => TimeLimit extends number ? AwaitedPrivateLocationAttachment : Promise<Exclude<Awaited<AwaitedPrivateLocationAttachment>, null | undefined>>;
            readonly Public: {
                readonly Chat: <TimeLimit extends number | undefined>(chatId: IPublicChatAttachment['Chat']['id'], authorId: IPublicChatAttachment['Author']['id'], timeLimit: TimeLimit) => TimeLimit extends number ? AwaitedPublicChatLocationAttachment : Promise<Exclude<Awaited<AwaitedPublicChatLocationAttachment>, null | undefined>>;
            };
        };
        readonly Chat: {
            readonly Private: <TimeLimit extends number | undefined>(chatId: IPublicChatAttachment['Chat']['id'], authorId: IPublicChatAttachment['Author']['id'], timeLimit: TimeLimit) => TimeLimit extends number ? AwaitedPrivateChatAttachment : Promise<Exclude<Awaited<AwaitedPrivateChatAttachment>, null | undefined>>;
            readonly Public: {
                readonly Chat: <TimeLimit extends number | undefined>(chatId: IPublicChatAttachment['Chat']['id'], authorId: IPublicChatAttachment['Author']['id'], timeLimit: TimeLimit) => TimeLimit extends number ? AwaitedPublicChatChatAttachment : Promise<Exclude<Awaited<AwaitedPublicChatChatAttachment>, null | undefined>>;
            };
        };
        readonly User: {
            readonly Private: <TimeLimit extends number | undefined>(chatId: IPublicChatAttachment['Chat']['id'], authorId: IPublicChatAttachment['Author']['id'], timeLimit: TimeLimit) => TimeLimit extends number ? AwaitedPrivateUserAttachment : Promise<Exclude<Awaited<AwaitedPrivateUserAttachment>, null | undefined>>;
            readonly Public: {
                readonly Chat: <TimeLimit extends number | undefined>(chatId: IPublicChatAttachment['Chat']['id'], authorId: IPublicChatAttachment['Author']['id'], timeLimit: TimeLimit) => TimeLimit extends number ? AwaitedPublicChatUserAttachment : Promise<Exclude<Awaited<AwaitedPublicChatUserAttachment>, null | undefined>>;
            };
        };
    };
    readonly Action: {
        readonly Component: {
            readonly Button: {
                readonly Private: <TimeLimit extends number | undefined>(buttonId: RegExp, authorId: IPublicChatAttachment['Author']['id'], timeLimit: TimeLimit) => TimeLimit extends number ? AwaitedPrivateButtonInteraction : Promise<Exclude<Awaited<AwaitedPrivateButtonInteraction>, null | undefined>>;
                readonly Public: {
                    readonly Chat: <TimeLimit extends number | undefined>(buttonId: RegExp, authorId: IPublicChatAttachment['Author']['id'], timeLimit: TimeLimit) => TimeLimit extends number ? AwaitedPublicChatButtonInteraction : Promise<Exclude<Awaited<AwaitedPublicChatButtonInteraction>, null | undefined>>;
                };
            };
        };
    };
}
interface ITelegramAPISource {
    readonly Handler: {
        readonly Event: {
            readonly Directory: string;
        };
        readonly Message: {
            readonly Directory: string;
        };
        readonly Action: {
            readonly Component: {
                readonly Directory: string;
            };
        };
        readonly Command: {
            readonly Directory: string;
        };
    };
}
declare const EventName: {
    readonly Init: "init";
    readonly Message: {
        readonly Any: {
            readonly Send: "messageAnySend";
        };
        readonly Separate: {
            readonly Private: {
                readonly Send: "messageSeparatePrivateSend";
            };
            readonly Public: {
                readonly Chat: {
                    readonly Send: "messageSeparatePublicChatSend";
                };
            };
        };
    };
    readonly Attachment: {
        readonly Phone: {
            readonly Any: {
                readonly Send: "attachmentPhoneAnySend";
            };
            readonly Separate: {
                readonly Private: {
                    readonly Send: "attachmentPhoneSeparatePrivateSend";
                };
                readonly Public: {
                    readonly Chat: {
                        readonly Send: "attachmentPhoneSeparatePublicChatSend";
                    };
                };
            };
        };
        readonly Location: {
            readonly Any: {
                readonly Send: "attachmentLocationAnySend";
            };
            readonly Separate: {
                readonly Private: {
                    readonly Send: "attachmentLocationSeparatePrivateSend";
                };
                readonly Public: {
                    readonly Chat: {
                        readonly Send: "attachmentLocationSeparatePublicChatSend";
                    };
                };
            };
        };
        readonly Chat: {
            readonly Any: {
                readonly Send: "attachmentChatAnySend";
            };
            readonly Separate: {
                readonly Private: {
                    readonly Send: "attachmentChatSeparatePrivateSend";
                };
                readonly Public: {
                    readonly Chat: {
                        readonly Send: "attachmentChatSeparatePublicChatSend";
                    };
                };
            };
        };
        readonly User: {
            readonly Any: {
                readonly Send: "attachmentUserAnySend";
            };
            readonly Separate: {
                readonly Private: {
                    readonly Send: "attachmentUserSeparatePrivateSend";
                };
                readonly Public: {
                    readonly Chat: {
                        readonly Send: "attachmentUserSeparatePublicChatSend";
                    };
                };
            };
        };
    };
    readonly Action: {
        readonly Component: {
            readonly Button: {
                readonly Any: {
                    readonly Send: "actionComponentButtonAnySend";
                };
                readonly Separate: {
                    readonly Private: {
                        readonly Send: "actionComponentButtonSeparatePrivateSend";
                    };
                    readonly Public: {
                        readonly Chat: {
                            readonly Send: "actionComponentButtonSeparatePublicChatSend";
                        };
                    };
                };
            };
        };
    };
    readonly Command: {
        readonly Slash: {
            readonly Any: {
                readonly Send: "commandSlashAnySend";
            };
            readonly Separate: {
                readonly Private: {
                    readonly Send: "commandSlashSeparatePrivateSend";
                };
                readonly Public: {
                    readonly Chat: {
                        readonly Send: "commandSlashSeparatePublicChatSend";
                    };
                };
            };
        };
    };
};
interface IEventFunction {
    [EventName.Init]: (botInfo: BotClientInfo) => void;
    [EventName.Message.Any.Send]: AnyMessageEvent;
    [EventName.Message.Separate.Private.Send]: PrivateMessageEvent;
    [EventName.Message.Separate.Public.Chat.Send]: PublicChatMessageEvent;
    [EventName.Attachment.Phone.Any.Send]: AnyPhoneAttachmentEvent;
    [EventName.Attachment.Phone.Separate.Private.Send]: PrivatePhoneAttachmentEvent;
    [EventName.Attachment.Phone.Separate.Public.Chat.Send]: PublicChatPhoneAttachmentEvent;
    [EventName.Attachment.Location.Any.Send]: AnyLocationAttachmentEvent;
    [EventName.Attachment.Location.Separate.Private.Send]: PrivateLocationAttachmentEvent;
    [EventName.Attachment.Location.Separate.Public.Chat.Send]: PublicChatLocationAttachmentEvent;
    [EventName.Attachment.Chat.Any.Send]: AnyChatAttachmentEvent;
    [EventName.Attachment.Chat.Separate.Private.Send]: PrivateChatAttachmentEvent;
    [EventName.Attachment.Chat.Separate.Public.Chat.Send]: PublicChatChatAttachmentEvent;
    [EventName.Attachment.User.Any.Send]: AnyUserAttachmentEvent;
    [EventName.Attachment.User.Separate.Private.Send]: PrivateUserAttachmentEvent;
    [EventName.Attachment.User.Separate.Public.Chat.Send]: PublicChatUserAttachmentEvent;
    [EventName.Action.Component.Button.Any.Send]: AnyButtonInteractionEvent;
    [EventName.Action.Component.Button.Separate.Private.Send]: PrivateButtonInteractionEvent;
    [EventName.Action.Component.Button.Separate.Public.Chat.Send]: PublicChatButtonInteractionEvent;
    [EventName.Command.Slash.Any.Send]: AnySlashCommandEvent;
    [EventName.Command.Slash.Separate.Private.Send]: PrivateSlashCommandEvent;
    [EventName.Command.Slash.Separate.Public.Chat.Send]: PublicChatSlashCommandEvent;
}
interface IStaticEventHandler {
    readonly Name: typeof EventName;
}
interface IEventHandler {
    readonly Emitter: ServerCore.Engine.Module.Classes.EventEmitter<IEventFunction>;
}
export * as Handler from './handler/__handler.js';
export default class TelegramAPI extends ServerCore.Engine.API.Base.default {
    static readonly Event: IStaticEventHandler;
    readonly Event: IEventHandler;
    readonly Client: Dependencies.Telegraf.Telegraf;
    private readonly __Token;
    private readonly __Source;
    private readonly __FileSystem;
    get Awaited(): ITelegramAwaitedGetter;
    GetBotInfo(): Promise<BotClientInfo>;
    FormUserName(login: string | undefined, firstName: string | undefined, lastName: string | undefined): string;
    Init(): Promise<void>;
    constructor(token: string, source: ITelegramAPISource);
    private __GetBotInfo;
    private __FormUserName;
    private __ImportEventHandlers;
    private __ImportMessageHandlers;
    private __ImportActionComponentHandlers;
    private __ImportCommandHandlers;
    private __RegisterCommandsHandler;
    private __RegisterMessageEventHandler;
    private __RegisterAttachmentEventHandler;
    private __RegisterActionEventHandler;
    private __RegisterInitializationHandler;
    private __RegisterEventHandlers;
    private __RegisterHandlers;
    private __RegisterMetrics;
    private __Init;
}
//# sourceMappingURL=__api.d.ts.map