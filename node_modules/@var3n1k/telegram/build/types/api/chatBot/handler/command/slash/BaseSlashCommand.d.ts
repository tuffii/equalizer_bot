import * as ServerCore from '@var3n1k/server-core';
import * as BaseCommand from '../BaseCommand.js';
import * as TelegramAPI from '../../../__api.js';
import * as Dependencies from '../../../__dependencies.js';
interface ICommandHandlerSettings {
    readonly Private: {
        readonly Execution: {
            readonly Error: {
                readonly NotReady: {
                    Message: (..._: Parameters<BaseCommand.PrivateSlashCommandEventFunction>) => ServerCore.Engine.Module.Types.Promise.Promisable<string>;
                };
                readonly ChannelRestricted: {
                    Message: (..._: Parameters<BaseCommand.PrivateSlashCommandEventFunction>) => ServerCore.Engine.Module.Types.Promise.Promisable<string>;
                };
                readonly UserRestricted: {
                    Message: (..._: Parameters<BaseCommand.PrivateSlashCommandEventFunction>) => ServerCore.Engine.Module.Types.Promise.Promisable<string>;
                };
            };
        };
    };
    readonly Public: {
        readonly Chat: {
            readonly Execution: {
                readonly Error: {
                    readonly NotReady: {
                        Message: (..._: Parameters<BaseCommand.PublicChatSlashCommandEventFunction>) => ServerCore.Engine.Module.Types.Promise.Promisable<string>;
                    };
                    readonly ChannelRestricted: {
                        Message: (..._: Parameters<BaseCommand.PublicChatSlashCommandEventFunction>) => ServerCore.Engine.Module.Types.Promise.Promisable<string>;
                    };
                    readonly UserRestricted: {
                        Message: (..._: Parameters<BaseCommand.PublicChatSlashCommandEventFunction>) => ServerCore.Engine.Module.Types.Promise.Promisable<string>;
                    };
                };
            };
        };
    };
}
interface ICommandHandlerSettingsGetter {
    readonly Private: {
        readonly Execution: {
            readonly Error: {
                readonly SetNotReadyMessageConstructor: (newMessage: ICommandHandlerSettings['Private']['Execution']['Error']['NotReady']['Message']) => void;
                readonly SetChannelRestrictedConstructor: (newMessage: ICommandHandlerSettings['Private']['Execution']['Error']['ChannelRestricted']['Message']) => void;
                readonly SetUserRestrictedConstructor: (newMessage: ICommandHandlerSettings['Private']['Execution']['Error']['UserRestricted']['Message']) => void;
            };
        };
    };
    readonly Public: {
        readonly Chat: {
            readonly Execution: {
                readonly Error: {
                    readonly SetNotReadyMessageConstructor: (newMessage: ICommandHandlerSettings['Public']['Chat']['Execution']['Error']['NotReady']['Message']) => void;
                    readonly SetChannelRestrictedConstructor: (newMessage: ICommandHandlerSettings['Public']['Chat']['Execution']['Error']['ChannelRestricted']['Message']) => void;
                    readonly SetUserRestrictedConstructor: (newMessage: ICommandHandlerSettings['Public']['Chat']['Execution']['Error']['UserRestricted']['Message']) => void;
                };
            };
        };
    };
}
interface ICommandHandlerAccess {
    readonly Private: {
        readonly Available: boolean;
        readonly PerUser: (user: Exclude<Dependencies.Telegraf.Context['from'], null | undefined>) => ServerCore.Engine.Module.Types.Promise.Promisable<boolean>;
    };
    readonly Public: {
        readonly Chat: {
            readonly Available: {
                readonly PerChat: (chat: Exclude<Dependencies.Telegraf.Context['chat'], null | undefined>) => ServerCore.Engine.Module.Types.Promise.Promisable<boolean>;
            };
            readonly PerUser: (chat: Exclude<Dependencies.Telegraf.Context['chat'], null | undefined>, user: Exclude<Dependencies.Telegraf.Context['from'], null | undefined>) => ServerCore.Engine.Module.Types.Promise.Promisable<boolean>;
        };
    };
}
interface ICommandHandlerExecutable {
    readonly Private: BaseCommand.PrivateSlashCommandEventFunction;
    readonly Public: {
        readonly Chat: BaseCommand.PublicChatSlashCommandEventFunction;
    };
}
export default class BaseSlashCommand extends BaseCommand.default<BaseCommand.PrivateSlashCommandEventFunction, BaseCommand.PublicChatSlashCommandEventFunction> {
    private static readonly __Settings;
    static get Settings(): ICommandHandlerSettingsGetter;
    constructor(api: TelegramAPI.default, name: string, description: string, access: ICommandHandlerAccess, executable: ICommandHandlerExecutable);
    private __ValidatePrivateReadyCommandExecution;
    private __ValidatePrivateChannelCommandExecution;
    private __ValidatePrivateUserCommandExecution;
    private __ValidatePublicChatReadyCommandExecution;
    private __ValidatePublicChatChannelCommandExecution;
    private __ValidatePublicChatUserCommandExecution;
    private __ValidatePrivateCommandExecution;
    private __BeforePrivateCommandExecution;
    private __AlternativePrivateCommandExecutable;
    private __AfterPrivateCommandExecution;
    private __RegisterPrivateCommandHandler;
    private __ValidatePublicChatCommandExecution;
    private __BeforePublicChatCommandExecution;
    private __AlternativePublicChatCommandExecutable;
    private __AfterPublicChatCommandExecution;
    private __RegisterPublicChatCommandHandler;
    private __RegisterCommandHandler;
    private __RegisterHandlers;
    private __RegisterMetrics;
}
export {};
//# sourceMappingURL=BaseSlashCommand.d.ts.map