import * as ServerCore from '@var3n1k/server-core';
import * as TelegramAPI from '../../__api.js';
import * as Dependencies from '../../__dependencies.js';
type CommandEvent = TelegramAPI.IEventHandlerFunction['Command'];
type PrivateSlashCommandEvent = CommandEvent['Slash']['Private'];
type PublicChatSlashCommandEvent = CommandEvent['Slash']['Public']['Chat'];
export type PrivateSlashCommandEventFunction = (..._: Parameters<PrivateSlashCommandEvent>) => ServerCore.Engine.Module.Types.Promise.Promisable<ReturnType<PrivateSlashCommandEvent>>;
export type PublicChatSlashCommandEventFunction = (..._: Parameters<PublicChatSlashCommandEvent>) => ServerCore.Engine.Module.Types.Promise.Promisable<ReturnType<PublicChatSlashCommandEvent>>;
export type PrivateCommandEvent = PrivateSlashCommandEventFunction;
export type PublicChatCommandEvent = PublicChatSlashCommandEventFunction;
interface ICommandHandlerAccess {
    readonly Private: {
        readonly Available: boolean;
        readonly PerUser: (user: Exclude<Dependencies.Telegraf.Context['from'], null | undefined>) => ServerCore.Engine.Module.Types.Promise.Promisable<boolean>;
    };
    readonly Public: {
        readonly Chat: {
            readonly Available: {
                readonly PerChat: (chat: Exclude<Dependencies.Telegraf.Context['chat'], null | undefined>) => ServerCore.Engine.Module.Types.Promise.Promisable<boolean>;
            };
            readonly PerUser: (chat: Exclude<Dependencies.Telegraf.Context['chat'], null | undefined>, user: Exclude<Dependencies.Telegraf.Context['from'], null | undefined>) => ServerCore.Engine.Module.Types.Promise.Promisable<boolean>;
        };
    };
}
interface ICommandHandlerExecutable<PrivateEvent extends PrivateCommandEvent, PublicChatEvent extends PublicChatCommandEvent> {
    readonly Private: PrivateEvent;
    readonly Public: {
        readonly Chat: PublicChatEvent;
    };
}
export default class BaseCommand<PrivateEvent extends PrivateCommandEvent, PublicChatEvent extends PublicChatCommandEvent> {
    readonly Name: string;
    readonly Description: string;
    readonly Access: ICommandHandlerAccess;
    protected readonly _API: TelegramAPI.default;
    protected readonly _Executable: ICommandHandlerExecutable<PrivateEvent, PublicChatEvent>;
    constructor(api: TelegramAPI.default, name: string, description: string, access: ICommandHandlerAccess, executable: ICommandHandlerExecutable<PrivateEvent, PublicChatEvent>);
}
export {};
//# sourceMappingURL=BaseCommand.d.ts.map