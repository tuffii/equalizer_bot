import * as ServerCore from '@var3n1k/server-core';
import * as TelegramAPI from '../../../__api.js';
import * as Dependencies from '../../../__dependencies.js';
type ComponentEvent = TelegramAPI.IEventHandlerFunction['Action']['Component'];
type PrivateButtonEvent = ComponentEvent['Button']['Private'];
type PublicChatButtonEvent = ComponentEvent['Button']['Public']['Chat'];
export type PrivateButtonEventFunction = (..._: Parameters<PrivateButtonEvent>) => ServerCore.Engine.Module.Types.Promise.Promisable<ReturnType<PrivateButtonEvent>>;
export type PublicChatButtonEventFunction = (..._: Parameters<PublicChatButtonEvent>) => ServerCore.Engine.Module.Types.Promise.Promisable<ReturnType<PublicChatButtonEvent>>;
export type PrivateComponentEvent = PrivateButtonEventFunction;
export type PublicChatComponentEvent = PublicChatButtonEventFunction;
interface IComponentHandlerAccess {
    readonly Private: {
        readonly Available: boolean;
        readonly PerUser: (user: Exclude<Dependencies.Telegraf.Context['from'], null | undefined>) => ServerCore.Engine.Module.Types.Promise.Promisable<boolean>;
    };
    readonly Public: {
        readonly Chat: {
            readonly Available: {
                readonly PerChat: (chat: Exclude<Dependencies.Telegraf.Context['chat'], null | undefined>) => ServerCore.Engine.Module.Types.Promise.Promisable<boolean>;
            };
            readonly PerUser: (chat: Exclude<Dependencies.Telegraf.Context['chat'], null | undefined>, user: Exclude<Dependencies.Telegraf.Context['from'], null | undefined>) => ServerCore.Engine.Module.Types.Promise.Promisable<boolean>;
        };
    };
}
interface IComponentHandlerExecutable<PrivateEvent extends PrivateComponentEvent, PublicChatEvent extends PublicChatComponentEvent> {
    readonly Private: PrivateEvent;
    readonly Public: {
        readonly Chat: PublicChatEvent;
    };
}
export default class BaseComponent<PrivateEvent extends PrivateComponentEvent, PublicChatEvent extends PublicChatComponentEvent> {
    readonly Data: RegExp;
    readonly Access: IComponentHandlerAccess;
    protected readonly _API: TelegramAPI.default;
    protected readonly _Executable: IComponentHandlerExecutable<PrivateEvent, PublicChatEvent>;
    constructor(api: TelegramAPI.default, data: RegExp, access: IComponentHandlerAccess, executable: IComponentHandlerExecutable<PrivateEvent, PublicChatEvent>);
}
export {};
//# sourceMappingURL=BaseComponent.d.ts.map