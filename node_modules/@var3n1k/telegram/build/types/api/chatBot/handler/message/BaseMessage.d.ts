import * as ServerCore from '@var3n1k/server-core';
import * as TelegramAPI from '../../__api.js';
type MessageEvent = TelegramAPI.IEventHandlerFunction['Message'];
type PrivateMessageEvent = MessageEvent['Private'];
type PublicChatMessageEvent = MessageEvent['Public']['Chat'];
export type PrivateMessageEventFunction = (..._: Parameters<PrivateMessageEvent>) => ServerCore.Engine.Module.Types.Promise.Promisable<ReturnType<PrivateMessageEvent>>;
export type PublicChatMessageEventFunction = (..._: Parameters<PublicChatMessageEvent>) => ServerCore.Engine.Module.Types.Promise.Promisable<ReturnType<PublicChatMessageEvent>>;
interface IMessageHandlerAccess {
    readonly Private: {
        readonly Available: boolean;
    };
    readonly Public: {
        readonly Chat: {
            readonly Available: boolean;
        };
    };
}
interface IMessageHandlerExecutable {
    readonly Private: PrivateMessageEventFunction;
    readonly Public: {
        readonly Chat: PublicChatMessageEventFunction;
    };
}
export default class BaseMessage {
    readonly Pattern: RegExp;
    readonly Access: IMessageHandlerAccess;
    protected readonly _API: TelegramAPI.default;
    protected readonly _Executable: IMessageHandlerExecutable;
    constructor(api: TelegramAPI.default, pattern: RegExp, access: IMessageHandlerAccess, executable: IMessageHandlerExecutable);
    private __BeforePrivateMessageExecution;
    private __AlternativePrivateMessageExecutable;
    private __AfterPrivateMessageExecution;
    private __RegisterPrivateMessageHandler;
    private __BeforePublicChatMessageExecution;
    private __AlternativePublicChatMessageExecutable;
    private __AfterPublicChatMessageExecution;
    private __RegisterPublicChatMessageHandler;
    private __RegisterCommandHandler;
    private __RegisterHandlers;
    private __RegisterMetrics;
}
export {};
//# sourceMappingURL=BaseMessage.d.ts.map