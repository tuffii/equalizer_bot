import * as ServerCore from '@var3n1k/server-core';
import * as TelegramAPI from '../../../../__api.js';
import * as BaseComponent from '../BaseComponent.js';
import * as Dependencies from '../../../../__dependencies.js';
interface IComponentHandlerSettings {
    readonly Private: {
        readonly Execution: {
            readonly Error: {
                readonly NotReady: {
                    Message: (..._: Parameters<BaseComponent.PrivateButtonEventFunction>) => ServerCore.Engine.Module.Types.Promise.Promisable<string>;
                };
                readonly ChannelRestricted: {
                    Message: (..._: Parameters<BaseComponent.PrivateButtonEventFunction>) => ServerCore.Engine.Module.Types.Promise.Promisable<string>;
                };
                readonly UserRestricted: {
                    Message: (..._: Parameters<BaseComponent.PrivateButtonEventFunction>) => ServerCore.Engine.Module.Types.Promise.Promisable<string>;
                };
            };
        };
    };
    readonly Public: {
        readonly Chat: {
            readonly Execution: {
                readonly Error: {
                    readonly NotReady: {
                        Message: (..._: Parameters<BaseComponent.PublicChatButtonEventFunction>) => ServerCore.Engine.Module.Types.Promise.Promisable<string>;
                    };
                    readonly ChannelRestricted: {
                        Message: (..._: Parameters<BaseComponent.PublicChatButtonEventFunction>) => ServerCore.Engine.Module.Types.Promise.Promisable<string>;
                    };
                    readonly UserRestricted: {
                        Message: (..._: Parameters<BaseComponent.PublicChatButtonEventFunction>) => ServerCore.Engine.Module.Types.Promise.Promisable<string>;
                    };
                };
            };
        };
    };
}
interface IComponentHandlerSettingsGetter {
    readonly Private: {
        readonly Execution: {
            readonly Error: {
                readonly SetNotReadyMessageConstructor: (newMessage: IComponentHandlerSettings['Private']['Execution']['Error']['NotReady']['Message']) => void;
                readonly SetChannelRestrictedConstructor: (newMessage: IComponentHandlerSettings['Private']['Execution']['Error']['ChannelRestricted']['Message']) => void;
                readonly SetUserRestrictedConstructor: (newMessage: IComponentHandlerSettings['Private']['Execution']['Error']['UserRestricted']['Message']) => void;
            };
        };
    };
    readonly Public: {
        readonly Chat: {
            readonly Execution: {
                readonly Error: {
                    readonly SetNotReadyMessageConstructor: (newMessage: IComponentHandlerSettings['Public']['Chat']['Execution']['Error']['NotReady']['Message']) => void;
                    readonly SetChannelRestrictedConstructor: (newMessage: IComponentHandlerSettings['Public']['Chat']['Execution']['Error']['ChannelRestricted']['Message']) => void;
                    readonly SetUserRestrictedConstructor: (newMessage: IComponentHandlerSettings['Public']['Chat']['Execution']['Error']['UserRestricted']['Message']) => void;
                };
            };
        };
    };
}
interface IComponentHandlerAccess {
    readonly Private: {
        readonly Available: boolean;
        readonly PerUser: (user: Exclude<Dependencies.Telegraf.Context['from'], null | undefined>) => ServerCore.Engine.Module.Types.Promise.Promisable<boolean>;
    };
    readonly Public: {
        readonly Chat: {
            readonly Available: {
                readonly PerChat: (chat: Exclude<Dependencies.Telegraf.Context['chat'], null | undefined>) => ServerCore.Engine.Module.Types.Promise.Promisable<boolean>;
            };
            readonly PerUser: (chat: Exclude<Dependencies.Telegraf.Context['chat'], null | undefined>, user: Exclude<Dependencies.Telegraf.Context['from'], null | undefined>) => ServerCore.Engine.Module.Types.Promise.Promisable<boolean>;
        };
    };
}
interface IComponentHandlerExecutable {
    readonly Private: BaseComponent.PrivateButtonEventFunction;
    readonly Public: {
        readonly Chat: BaseComponent.PublicChatButtonEventFunction;
    };
}
export default class BaseButtonComponent extends BaseComponent.default<BaseComponent.PrivateButtonEventFunction, BaseComponent.PublicChatButtonEventFunction> {
    private static readonly __Settings;
    static get Settings(): IComponentHandlerSettingsGetter;
    constructor(api: TelegramAPI.default, data: RegExp, access: IComponentHandlerAccess, executable: IComponentHandlerExecutable);
    private __ValidatePrivateReadyActionExecution;
    private __ValidatePrivateChannelActionExecution;
    private __ValidatePrivateUserActionExecution;
    private __ValidatePublicChatReadyActionExecution;
    private __ValidatePublicChatChannelActionExecution;
    private __ValidatePublicChatUserActionExecution;
    private __ValidatePrivateActionExecution;
    private __BeforePrivateActionExecution;
    private __AlternativePrivateActionExecutable;
    private __AfterPrivateActionExecution;
    private __RegisterPrivateActionHandler;
    private __ValidatePublicChatActionExecution;
    private __BeforePublicChatActionExecution;
    private __AlternativePublicChatActionExecutable;
    private __AfterPublicChatActionExecution;
    private __RegisterPublicChatActionHandler;
    private __RegisterActionHandler;
    private __RegisterHandlers;
    private __RegisterMetrics;
}
export {};
//# sourceMappingURL=BaseButtonComponent.d.ts.map