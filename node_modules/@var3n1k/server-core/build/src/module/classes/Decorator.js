import * as GlobalModule from '../@module.js';
export default class Decorator {
    // TODO: JSDoc
    // public static Method<SelfClass extends ClassInstance, MethodParameters extends ClassMethodParameters, ReturnValue extends ClassMethodReturnValue>(
    //   callbackFunction: (
    //     initialMethod: ClassMethod<SelfClass, MethodParameters, ReturnValue>,
    //     newMethodConstructor: ClassMethodConstructor<SelfClass, MethodParameters, ReturnValue>,
    //     methodContext: ClassMethodDecoratorContext<SelfClass, ClassMethod<SelfClass, MethodParameters, ReturnValue>>
    //   ) => ClassMethod<SelfClass, MethodParameters, ReturnValue>
    // ): ClassMethodDecorator<SelfClass, MethodParameters, ReturnValue> {
    //   const MethodDecorator: ClassMethodDecorator<SelfClass, MethodParameters, ReturnValue> = (_, __) => {
    //     const NewMethodConstructor: ClassMethodConstructor<SelfClass, MethodParameters, ReturnValue> = (___) => {
    //       function NewMethod(this: SelfClass, ...____: MethodParameters): ReturnValue {
    //         const InitialMethodResult = ___((...____) => _.call(this, ...____), this, ...____)
    //         return InitialMethodResult
    //       }
    //       return NewMethod
    //     }
    //     const NewDeclarativeMethod = callbackFunction(_, NewMethodConstructor, __)
    //     return NewDeclarativeMethod
    //   }
    //   return MethodDecorator
    // }
    // TODO: JSDoc
    static Method(callbackFunction) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(callbackFunction, new Validator().Default.Function().Required());
        const MethodDecorator = (_, __) => {
            const NewMethodConstructor = (___) => {
                const NewMethod = function (...____) {
                    const InitialMethodResult = ___((...____) => _.call(this, ...____), this, ...____);
                    return InitialMethodResult;
                };
                return NewMethod;
            };
            const NewDeclarativeMethod = callbackFunction(_, NewMethodConstructor, __);
            return NewDeclarativeMethod;
        };
        return MethodDecorator;
    }
}
// const TestMethodDecorator = GlobalModule.Classes.Decorator.Method((initialMethod, newMethodConstructor, methodContext) => {
//   console.log(`method decorator init`, ` | `, initialMethod.name, ` | `, methodContext.private, ` | `, methodContext.static, ` | `, methodContext.name)
//   const NewMethod = newMethodConstructor((initialMethodCall, thisValue, ...parameters) => {
//     console.log(`before method start`, ` | `, initialMethod.name)
//     const InitialMethodResult = initialMethodCall(...parameters)
//     console.log(`after method end`, ` | `, initialMethod.name)
//     return InitialMethodResult
//   })
//   return NewMethod
// })
// const TestMethodDecorator2 = <SelfClass extends GlobalModule.Types.Class.Instance<GlobalModule.Types.Class.Declaration>, Parameters extends Array<any>, ReturnValue extends any>(
//   target: (this: SelfClass, ...parameters: Parameters) => ReturnValue,
//   context: ClassMethodDecoratorContext<SelfClass, (this: SelfClass, ...parameters: Parameters) => ReturnValue>
// ) => {
//   console.log(`method decorator init`, ` | `, target.name, ` | `, context.private, ` | `, context.static, ` | `, context.name)
//   function NewMethod(this: SelfClass, ...parameters: Parameters): ReturnValue {
//     console.log(`before method start`, ` | `, target.name)
//     const InitialMethodResult = target.call(this, ...parameters)
//     console.log(`after method end`, ` | `, target.name)
//     return InitialMethodResult
//   }
//   return NewMethod
// }
//# sourceMappingURL=Decorator.js.map