import * as GlobalModule from '../@module.js';
export default class EventEmitter {
    // TODO: JSDoc
    __Events = new Map();
    GetListeners(eventName) {
        const EventListeners = this.__GetListeners(eventName);
        return EventListeners;
    }
    ClearListeners(eventName) {
        this.__ClearListeners(eventName);
    }
    RemoveListener(eventName, callback) {
        this.__RemoveListener(eventName, callback);
    }
    On(eventName, callback) {
        this.__DeclareNewEvent(eventName, true, callback);
    }
    Once(eventName, callback) {
        this.__DeclareNewEvent(eventName, false, callback);
    }
    // TODO: JSDoc
    OnAny(callback) {
        this.__DeclareNewEvent(undefined, true, callback);
    }
    // TODO: JSDoc
    OnceAny(callback) {
        this.__DeclareNewEvent(undefined, false, callback);
    }
    async Emit(eventName, ...parameters) {
        const EventCallbackResults = await this.__TriggerEvent(eventName, ...parameters);
        return EventCallbackResults;
    }
    // TODO: JSDoc
    constructor() { }
    // TODO: JSDoc
    __GetListeners(eventName) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(eventName, new Validator().Default.String().MinLength(1));
        const EventEntities = this.__Events.get(eventName);
        const DoesEventEntityExist = !Validator.TypeGuard.Default.IsNullOrUndefined(EventEntities);
        const EventListeners = GlobalModule.Functions.Parameter.Type.Manager.Default.Array.Copy(DoesEventEntityExist ? EventEntities.map((_el, _ind, _arr) => _el.Callback) : []);
        return EventListeners;
    }
    // TODO: JSDoc
    __ClearListeners(eventName) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(eventName, new Validator().Default.String().MinLength(1));
        this.__Events.set(eventName, []);
    }
    // TODO: JSDoc
    __RemoveListener(eventName, callback) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(eventName, new Validator().Default.String().MinLength(1));
        Validator.Strict(callback, new Validator().Default.Function().Required());
        const EventEntities = this.__Events.get(eventName);
        const DoesEventEntityExist = !Validator.TypeGuard.Default.IsNullOrUndefined(EventEntities);
        if (DoesEventEntityExist) {
            const FilteredEventEntities = EventEntities.filter((_el, _ind, _arr) => _el.Callback.toString() !== callback.toString());
            this.__Events.set(eventName, FilteredEventEntities);
        }
        else {
            this.__Events.set(eventName, []);
        }
    }
    // TODO: JSDoc
    __GetEventEntities(eventName) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(eventName, new Validator().Default.String().MinLength(1));
        const ExistingEvent = this.__Events.get(eventName);
        const DoesEventExist = this.__Events.has(eventName) &&
            Validator.Soft(ExistingEvent, new Validator().Default.Array()
                .Required()
                .Of(new Validator().Default.Object().Required().Exact({
                Multiple: new Validator().Default.Boolean().Required(),
                Callback: new Validator().Default.Function().Required(),
            }))).Status;
        const EventEntities = DoesEventExist ? GlobalModule.Functions.Parameter.Type.Manager.Default.Array.Copy(ExistingEvent) : [];
        return EventEntities;
    }
    // TODO: JSDoc
    __DeclareNewEvent(eventName, isMultiple, callback) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(eventName, new Validator().Default.String().MinLength(1));
        Validator.Strict(isMultiple, new Validator().Default.Boolean().Required());
        Validator.Strict(callback, new Validator().Default.Function().Required());
        const NewEventEntity = {
            Multiple: isMultiple,
            Callback: callback,
        };
        const OldEventEntities = this.__GetEventEntities(eventName);
        const NewEventEntities = [...OldEventEntities, NewEventEntity];
        this.__Events.set(eventName, NewEventEntities);
    }
    // TODO: JSDoc
    async __TriggerEvent(eventName, ...parameters) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(eventName, new Validator().Default.String().Required().MinLength(1));
        const UnnamedEventEntities = GlobalModule.Functions.Parameter.Type.Manager.Default.Array.Copy(this.__GetEventEntities(undefined));
        const UnnamedEventCallbackFunctions = UnnamedEventEntities.map((_el, _ind, _arr) => _el.Callback);
        const UnnamedEventFreeEntities = UnnamedEventEntities.filter((_el, _ind, _arr) => _el.Multiple);
        this.__Events.set(undefined, UnnamedEventFreeEntities);
        const ThisEventEntities = GlobalModule.Functions.Parameter.Type.Manager.Default.Array.Copy(this.__GetEventEntities(eventName));
        const ThisEventCallbackFunctions = ThisEventEntities.map((_el, _ind, _arr) => _el.Callback);
        const ThisEventFreeEntities = ThisEventEntities.filter((_el, _ind, _arr) => _el.Multiple);
        this.__Events.set(eventName, ThisEventFreeEntities);
        /* const UnnamedEventCallbackResults = */ await Promise.all(UnnamedEventCallbackFunctions.map((_el, _ind, _arr) => _el(eventName, ...parameters)));
        const ThisEventCallbackResults = await Promise.all(ThisEventCallbackFunctions.map((_el, _ind, _arr) => _el(...parameters)));
        return ThisEventCallbackResults;
    }
}
//# sourceMappingURL=EventEmitter.js.map