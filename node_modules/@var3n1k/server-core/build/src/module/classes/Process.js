import * as GlobalModule from '../@module.js';
const EventName = {
    Stop: `stop`,
    Exit: {
        Before: `beforeExit`,
        Instantiate: `exit`,
    },
    UnhandledException: `unhandledException`,
    Name: {
        Update: `nameUpdate`,
    },
    Source: {
        Directory: {
            Update: `sourcedirectoryUpdate`,
        },
    },
};
class Process {
    // TODO: JSDoc
    static Event = { Name: EventName, Emitter: new GlobalModule.Classes.EventEmitter() };
    // TODO: JSDoc
    static __Entity = GlobalModule.Dependencies.Default.Node.process;
    // TODO: JSDoc
    static get ID() {
        const ProcessID = Process.__Entity.pid;
        return ProcessID;
    }
    // TODO: JSDoc
    static get Name() {
        const ProcessName = Process.__Entity.title;
        return ProcessName;
    }
    // TODO: JSDoc
    static get Parent() {
        const Parent = {
            ID: Process.__Entity.ppid,
        };
        return Parent;
    }
    // TODO: JSDoc
    static get Source() {
        const Validator = GlobalModule.Classes.Validator;
        const Source = {
            File: {
                Path: {
                    Get: () => this.__GetRootFilePath(),
                },
            },
            Directory: {
                Path: {
                    Get: () => this.__GetRootDirectoryPath(),
                    Set: (_) => this.__SetRootDirectoryPath(_),
                },
            },
            Executable: {
                Path: {
                    Get: () => this.__GetExecutableFilePath(),
                },
                Version: Process.__Entity.version,
            },
        };
        return Source;
    }
    // TODO: JSDoc
    static get Launch() {
        const Launch = {
            Parameters: {
                Base: GlobalModule.Functions.Parameter.Type.Manager.Default.Array.Copy(Process.__Entity.argv),
                Exec: GlobalModule.Functions.Parameter.Type.Manager.Default.Array.Copy(Process.__Entity.execArgv),
            },
        };
        return Launch;
    }
    // TODO: JSDoc
    static get Platform() {
        const Platform = {
            Architecture: Process.__Entity.arch,
            Type: Process.__Entity.platform,
        };
        return Platform;
    }
    // TODO: JSDoc
    static get Config() {
        const ProcessConfig = GlobalModule.Functions.Parameter.Type.Manager.Default.Object.Copy(Process.__Entity.config);
        return ProcessConfig;
    }
    // TODO: JSDoc
    static get Env() {
        const InitialENV = GlobalModule.Functions.Parameter.Type.Manager.Default.Object.Copy(Process.__Entity.env);
        const ProcessENV = Object.assign({}, InitialENV);
        return ProcessENV;
    }
    // TODO: JSDoc
    static get Usage() {
        const UPTime = Process.__Entity.uptime();
        const HRTime = Process.__Entity.hrtime();
        const Usage = {
            Uptime: {
                Base: Math.floor(UPTime * Math.pow(10, 3)),
                HighResolution: HRTime[0] * Math.pow(10, 3) + HRTime[1] / Math.pow(10, 6),
            },
        };
        return Usage;
    }
    // TODO: JSDoc
    static SetName(newName) {
        Process.__SetName(newName);
    }
    // TODO: JSDoc
    static ImportEnv(relativePath) {
        Process.__ImportEnv(relativePath);
    }
    // TODO: JSDoc
    static Stop(exitCode) {
        Process.__Stop(exitCode);
    }
    // TODO: JSDoc
    static __GetRootFilePath() {
        const Validator = GlobalModule.Classes.Validator;
        const CurrentFileAbsoluteURL = import.meta.url;
        const CurrentFileAbsolutePath = GlobalModule.Classes.FileSystem.FormatPath(CurrentFileAbsoluteURL);
        const RootDirectoryAbsolutePath = this.__GetRootDirectoryPath();
        const RootFileAbsoluteURL = Process.Launch.Parameters.Base.find((_el, _ind, _arr) => _el.startsWith(RootDirectoryAbsolutePath));
        const DoesRootFileAbsoluteURLExist = Validator.TypeGuard.Default.IsString(RootFileAbsoluteURL) && !Validator.TypeGuard.Default.IsEmptyString(RootFileAbsoluteURL);
        const RootFileAbsolutePath = DoesRootFileAbsoluteURLExist ? GlobalModule.Classes.FileSystem.FormatPath(RootFileAbsoluteURL) : CurrentFileAbsolutePath;
        return RootFileAbsolutePath;
    }
    // TODO: JSDoc
    static __GetRootDirectoryPath() {
        const Validator = GlobalModule.Classes.Validator;
        const RootDirectoryAbsoluteURL = Process.__Entity.cwd();
        const RootDirectoryAbsolutePath = GlobalModule.Classes.FileSystem.FormatPath(RootDirectoryAbsoluteURL);
        return RootDirectoryAbsolutePath;
    }
    // TODO: JSDoc
    static __SetRootDirectoryPath(newPath) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(newPath, new Validator().Custom.FileSystem.Location.URL().Directory().Required().Or(new Validator().Custom.FileSystem.Location.Path().Directory().Required()));
        const FormattedPath = GlobalModule.Classes.FileSystem.FormatPath(newPath);
        Validator.Strict(FormattedPath, new Validator().Custom.FileSystem.Entity.Directory().Required().Exist());
        const OldSourceDirectory = GlobalModule.Classes.FileSystem.FormatPath(Process.__Entity.cwd());
        Process.__Entity.chdir(FormattedPath);
        const NewSourceDirectory = GlobalModule.Classes.FileSystem.FormatPath(Process.__Entity.cwd());
        Process.Event.Emitter.Emit(Process.Event.Name.Source.Directory.Update, OldSourceDirectory, NewSourceDirectory);
        GlobalModule.Classes.Console.Log.Preset.Info(`Корневая директория исполняемого процесса приложения изменена с '${OldSourceDirectory}' на '${NewSourceDirectory}'`);
    }
    // TODO: JSDoc
    static __GetExecutableFilePath() {
        const Validator = GlobalModule.Classes.Validator;
        const ExecutableFileAbsoluteURL = Process.__Entity.execPath;
        const ExecutableFileAbsolutePath = GlobalModule.Classes.FileSystem.FormatPath(ExecutableFileAbsoluteURL);
        return ExecutableFileAbsolutePath;
    }
    // TODO: JSDoc
    static __SetName(newName) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(newName, new Validator().Default.String().Required().MinLength(1));
        const OldName = Process.__Entity.title;
        Process.__Entity.title = newName;
        const NewName = Process.__Entity.title;
        Process.Event.Emitter.Emit(Process.Event.Name.Name.Update, OldName, NewName);
        GlobalModule.Classes.Console.Log.Preset.Info(`Название исполняемого процесса приложения изменено с '${OldName}' на '${NewName}'`);
    }
    // TODO: JSDoc
    static __ImportEnv(relativePath) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(relativePath, new Validator().Default.String().Required());
        const FormattedRelativePath = GlobalModule.Classes.FileSystem.FormatPath(relativePath);
        const AbsoluteRootDirectory = GlobalModule.Classes.FileSystem.FormatPath(GlobalModule.Classes.Process.Source.Directory.Path.Get());
        const AbsolutePath = GlobalModule.Dependencies.Default.Node.path.join(AbsoluteRootDirectory, FormattedRelativePath);
        Validator.Strict(AbsolutePath, new Validator().Custom.FileSystem.Location.URL().File().Required().Or(new Validator().Custom.FileSystem.Location.Path().File().Required()));
        const FormattedAbsolutePath = GlobalModule.Classes.FileSystem.FormatPath(AbsolutePath);
        Validator.Strict(FormattedAbsolutePath, new Validator().Custom.FileSystem.Entity.File().Required().Exist().Reachable().Readable());
        GlobalModule.Dependencies.Default.dotenv.config({ path: FormattedRelativePath });
        const EnvFileName = GlobalModule.Dependencies.Default.Node.path.basename(FormattedAbsolutePath);
        GlobalModule.Classes.Console.Log.Preset.Info(`Подключены переменные рабочей среды из файла '${EnvFileName}' (${FormattedAbsolutePath})`);
    }
    // TODO: JSDoc
    static __Stop(exitCode) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(exitCode, new Validator().Default.Numeric().Number().Required().Integer());
        Process.Event.Emitter.Emit(Process.Event.Name.Stop);
        GlobalModule.Classes.Console.Log.Preset.Info(`Исполняемый процесс приложения остановлен`);
        Process.__Entity.exitCode = exitCode;
        Process.__Entity.exit(exitCode);
    }
}
export default Process;
//# sourceMappingURL=Process.js.map