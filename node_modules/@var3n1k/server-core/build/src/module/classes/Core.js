import * as GlobalModule from '../@module.js';
const EventName = {
    Init: `init`,
};
class ExceptionHandler {
    // TODO: JSDoc
    Init() {
        this.__Init();
    }
    // TODO: JSDoc
    constructor() { }
    // TODO: JSDoc
    __ReThrowEvents() {
        const Validator = GlobalModule.Classes.Validator;
        const DoesExceptionExist = Validator.TypeGuard.Default.IsError;
        const CatchException = (...parameters) => parameters.find((_el, _ind, _arr) => DoesExceptionExist(_el));
        const ReThrowExceptionEvent = (...parameters) => {
            const IntermediateException = CatchException(...parameters);
            const DoesIntermediateExceptionExist = DoesExceptionExist(IntermediateException);
            if (DoesIntermediateExceptionExist) {
                GlobalModule.Classes.Process.Event.Emitter.Emit(GlobalModule.Classes.Process.Event.Name.UnhandledException, IntermediateException);
            }
        };
        GlobalModule.Dependencies.Default.Node.process.on(`uncaughtException`, (_err, _origin) => {
            ReThrowExceptionEvent(_err, _origin);
        });
        GlobalModule.Dependencies.Default.Node.process.on(`unhandledRejection`, (_reason, _promise) => {
            ReThrowExceptionEvent(_reason, _promise);
        });
    }
    // TODO: JSDoc
    __CatchEvents() {
        const Validator = GlobalModule.Classes.Validator;
        const LogException = (...anyParameters) => {
            for (let i = 0; i < anyParameters.length; i++) {
                const AnyParameter = anyParameters[i];
                const IsAnyParameterANewException = Validator.TypeGuard.Default.IsInstanceOf(AnyParameter, globalThis.Error);
                if (IsAnyParameterANewException) {
                    GlobalModule.Classes.Console.Log.Preset.Error(AnyParameter, true);
                }
            }
        };
        GlobalModule.Classes.Process.Event.Emitter.On(GlobalModule.Classes.Process.Event.Name.UnhandledException, (_) => {
            LogException(_);
        });
        this.__ReThrowEvents();
        GlobalModule.Classes.Console.Log.Preset.Info(`Запущен обработчик исключений`);
    }
    // TODO: JSDoc
    __Init() {
        this.__CatchEvents();
    }
}
class ExitHandler {
    // TODO: JSDoc
    Init() {
        this.__Init();
    }
    // TODO: JSDoc
    constructor() { }
    // TODO: JSDoc
    __ReThrowEvents() {
        GlobalModule.Dependencies.Default.Node.process.on(`beforeExit`, (_code) => {
            GlobalModule.Classes.Process.Event.Emitter.Emit(GlobalModule.Classes.Process.Event.Name.Exit.Before, _code);
        });
        GlobalModule.Dependencies.Default.Node.process.on(`exit`, (_code) => {
            GlobalModule.Classes.Process.Event.Emitter.Emit(GlobalModule.Classes.Process.Event.Name.Exit.Instantiate, _code);
        });
    }
    // TODO: JSDoc
    __CatchEvents() {
        GlobalModule.Classes.Process.Event.Emitter.On(GlobalModule.Classes.Process.Event.Name.Exit.Before, (_) => {
            // TODO: Logic before exit
        });
        GlobalModule.Classes.Process.Event.Emitter.On(GlobalModule.Classes.Process.Event.Name.Exit.Instantiate, (_) => {
            // TODO: Logic before exit instantiation
        });
        this.__ReThrowEvents();
        GlobalModule.Classes.Console.Log.Preset.Info(`Запущен обработчик завершения работы исполняемого процесса приложения`);
    }
    // TODO: JSDoc
    __Init() {
        this.__CatchEvents();
    }
}
class Core {
    // TODO: JSDoc
    static Event = { Name: EventName };
    // TODO: JSDoc
    Event = { Emitter: new GlobalModule.Classes.EventEmitter() };
    // TODO: JSDoc
    Process = GlobalModule.Classes.Process;
    // TODO: JSDoc
    Console = GlobalModule.Classes.Console;
    // TODO: JSDoc
    FileSystem = new GlobalModule.Classes.FileSystem(this.Process.Source.Directory.Path.Get());
    // TODO: JSDoc
    Dependencies;
    // TODO: JSDoc
    DataSet;
    // TODO: JSDoc
    Functions;
    // TODO: JSDoc
    Classes;
    // TODO: JSDoc
    async Init(initializationFunction) {
        await this.__Init(initializationFunction);
    }
    // TODO: JSDoc
    constructor(dependencies = {}, dataSet = {}, functions = {}, classes = {}, relativeEnvPaths) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(dependencies, new Validator().Default.Object().Required());
        Validator.Strict(dataSet, new Validator().Default.Object().Required());
        Validator.Strict(functions, new Validator().Default.Object().Required());
        Validator.Strict(classes, new Validator().Default.Object().Required());
        this.Dependencies = Object.assign({}, dependencies, GlobalModule.Dependencies);
        this.DataSet = Object.assign({}, dataSet, GlobalModule.DataSet);
        this.Functions = Object.assign({}, functions, GlobalModule.Functions);
        this.Classes = Object.assign({}, classes, GlobalModule.Classes);
        Validator.Strict(relativeEnvPaths, new Validator().Default.Array().Required().Of(new Validator().Default.String().Required()));
        const AbsoluteRootDirectory = GlobalModule.Classes.FileSystem.FormatPath(GlobalModule.Classes.Process.Source.Directory.Path.Get());
        const AbsoluteEnvPaths = relativeEnvPaths.map((_el, _ind, _arr) => GlobalModule.Dependencies.Default.Node.path.join(AbsoluteRootDirectory, _el));
        Validator.Strict(AbsoluteEnvPaths, new Validator().Default.Array().Required().Of(new Validator().Custom.FileSystem.Entity.File().Required().Exist().Reachable().Readable()));
        for (let i = 0; i < relativeEnvPaths.length; i++) {
            const RelativeEnvPath = relativeEnvPaths[i];
            this.Process.ImportEnv(RelativeEnvPath);
        }
        this.__RegisterMetrics();
    }
    // TODO: JSDoc
    __RegisterExitHandler() {
        const ExitEventHandler = new ExitHandler().Init();
    }
    // TODO: JSDoc
    __RegisterExceptionHandler() {
        const ExceptionEventHandler = new ExceptionHandler().Init();
    }
    // TODO: JSDoc
    __RegisterInitializationHandler() {
        this.Event.Emitter.On(Core.Event.Name.Init, async () => {
            this.Console.Log.Preset.Info(`Приложение запущено`);
        });
    }
    // TODO: JSDoc
    __RegisterHandlers() {
        this.__RegisterExitHandler();
        this.__RegisterExceptionHandler();
        this.__RegisterInitializationHandler();
    }
    // TODO: JSDoc
    __RegisterProcess() {
        const ProcessRootDirectory = this.Classes.FileSystem.FormatPath(this.Process.Source.Directory.Path.Get());
        const ProcessRootDirectoryName = this.Dependencies.Default.Node.path.basename(ProcessRootDirectory);
        this.Process.SetName(ProcessRootDirectoryName);
    }
    // TODO: JSDoc
    __RegisterConsole() {
        this.Console.Log.Preset.Info(`Регистрирование настроек консоли`);
        this.Console.Settings.Set.TimeTag(true, true, true);
        this.Console.Settings.Set.Elements(false);
        const NewSettings = this.Console.Settings.Get();
        const TimeTagSeparator = NewSettings.TimeTag.NamedMonth ? this.DataSet.Dictionary.Symbol.Single.Service.Separator.Space.Default : `.`;
        const TimeTagYearFormat = NewSettings.TimeTag.FullYear ? `YYYY` : `YY`;
        const TimeTagMonthFormat = NewSettings.TimeTag.NamedMonth ? `Month` : `MM`;
        const IsTimeTagUseMilliseconds = NewSettings.TimeTag.Ms;
        const TimeTagFormat = `[DD${TimeTagSeparator}${TimeTagMonthFormat}${TimeTagSeparator}${TimeTagYearFormat} | HH:MM:SS${IsTimeTagUseMilliseconds ? `.ssss` : ``}]`;
        let ElementsFormat;
        if (NewSettings.Elements.Compact)
            ElementsFormat = `стандартный (упрощенный)`;
        else {
            ElementsFormat = `расширенный (полный)`;
        }
        this.Console.Log.Preset.Info(`Настройки консоли зарегистрированы. Консоль использует тэг времени в формате ${TimeTagFormat} и ${ElementsFormat} вывод элементов`);
    }
    // TODO: JSDoc
    __RegisterMetrics() {
        this.__RegisterProcess();
        this.__RegisterConsole();
        this.__RegisterHandlers();
    }
    // TODO: JSDoc
    async __Init(initializationFunction) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(initializationFunction, new Validator().Default.Function().Required());
        this.Console.Log.Preset.Info(`Инициализация приложения`);
        await initializationFunction();
        this.Event.Emitter.Emit(Core.Event.Name.Init);
    }
}
export default Core;
//# sourceMappingURL=Core.js.map