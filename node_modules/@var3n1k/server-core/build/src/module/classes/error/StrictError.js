import * as GlobalModule from '../../@module.js';
const InvalidErrorCodeName = {
    CodeName: {
        DoesntExist: `ERROR_CODE_NAME_DOESNT_EXIST`,
    },
    Constructor: {
        DoesntExist: `ERROR_CONSTRUCTOR_DOESNT_EXIST`,
    },
};
const InvalidErrorMessageConstructor = {
    [InvalidErrorCodeName.CodeName.DoesntExist]: {
        Code: -101999,
        Message: ((_) => [`Ожидалось указание действительного названия кода исключения. Получен параметр типа '${typeof _}' (`, _, `)`]),
    },
    [InvalidErrorCodeName.Constructor.DoesntExist]: {
        Code: -102999,
        Message: ((_, __) => [
            `По указанному коду исключения (`,
            _,
            `) отсутствует задекларированный конструктор. Был найден параметр типа '${typeof __}' (`,
            __,
            `)`,
        ]),
    },
};
export default class StrictError extends GlobalModule.Classes.Error.BaseError {
    // TODO: JSDoc
    constructor(tag, tagColor, messageConstructor, codeName, codeNameColor, ...parameters) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(tag, new Validator().Default.String().Required().MinLength(1));
        Validator.Strict(tagColor, new Validator().Custom.Color.RGB().Required());
        Validator.Strict(messageConstructor, new Validator().Default.Object()
            .Required()
            .Of(new Validator().Default.Object().Required().Exact({
            Code: new Validator().Default.Numeric().Number().Required().Integer(),
            Message: new Validator().Default.Function().Required(),
        })));
        Validator.Strict(codeName, new Validator().Default.Symbol().Required().Or(new Validator().Default.String().Required()).Or(new Validator().Default.Numeric().Number().Required()));
        Validator.Strict(codeNameColor, new Validator().Custom.Color.RGB().Required());
        const TypeFixedCodeName = codeName;
        const ErrorInherition = (errorConstructor, errorCodeName, errorParameters) => {
            const MessageConstructor = errorConstructor[errorCodeName];
            const MessageConstructorData = {
                Code: MessageConstructor.Code,
                Message: MessageConstructor.Message(...errorParameters),
            };
            const ErrorInheritionParameters = [
                tag,
                tagColor,
                MessageConstructorData.Code,
                TypeFixedCodeName,
                codeNameColor,
                undefined,
                MessageConstructorData.Message,
            ];
            return ErrorInheritionParameters;
        };
        const ErrorConstructorCodes = GlobalModule.Functions.Parameter.Type.Manager.Default.Object.GetProperties(messageConstructor);
        const DoesErrorCodeNameExist = Validator.Soft(ErrorConstructorCodes, new Validator().Default.Array().Required().With(TypeFixedCodeName)).Status;
        if (!DoesErrorCodeNameExist) {
            const InvalidErrorParameters = ErrorInherition(InvalidErrorMessageConstructor, InvalidErrorCodeName.CodeName.DoesntExist, [TypeFixedCodeName]);
            super(...InvalidErrorParameters);
            this._StackTrace.Depth += 1;
            throw this;
        }
        const ErrorConstructor = messageConstructor[TypeFixedCodeName];
        const DoesErrorConstructorExist = Validator.Soft(ErrorConstructor, new Validator().Default.Object().Required().Exact({
            Code: new Validator().Default.Numeric().Number().Required().Integer(),
            Message: new Validator().Default.Function().Required(),
        })).Status;
        if (!DoesErrorConstructorExist) {
            const InvalidErrorParameters = ErrorInherition(InvalidErrorMessageConstructor, InvalidErrorCodeName.Constructor.DoesntExist, [TypeFixedCodeName, ErrorConstructor]);
            super(...InvalidErrorParameters);
            this._StackTrace.Depth += 1;
            throw this;
        }
        const InvalidErrorParameters = ErrorInherition(messageConstructor, TypeFixedCodeName, parameters);
        super(...InvalidErrorParameters);
        this._StackTrace.Depth += 1;
    }
}
//# sourceMappingURL=StrictError.js.map