import * as GlobalModule from '../../../../../../@module.js';
//* -------------------------------------------------------------------------
//* Realization
//* -------------------------------------------------------------------------
export default function MultiSplit(initialString, ...separators) {
    const Validator = GlobalModule.Classes.Validator;
    Validator.Strict(initialString, new Validator().Default.String().Required());
    Validator.Strict(separators, new Validator().Default.Array().Required().Of(new Validator().Default.String().Required().Or(new Validator().Default.RegExp().Required())));
    const StringSplitArray = [initialString];
    for (let i = 0; i < separators.length; i++) {
        const Separator = separators[i];
        const NewStringSplitArray = StringSplitArray.reduce((_prev, _curr, _currInd, _arr) => [..._prev, ..._curr.split(Separator)], []);
        const NewNonEmptyStringSplitArray = NewStringSplitArray.filter((_el, _ind, _arr) => !Validator.TypeGuard.Default.IsEmptyString(_el.split(/[\s]+/).join(GlobalModule.DataSet.Dictionary.Symbol.Single.Service.Separator.Space.Default)));
        GlobalModule.Functions.Parameter.Type.Manager.Default.Array.Clear(StringSplitArray);
        StringSplitArray.push(...NewNonEmptyStringSplitArray);
    }
    return StringSplitArray;
}
//# sourceMappingURL=MultiSplit.js.map