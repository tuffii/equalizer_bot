import * as GlobalModule from '../../../../../../@module.js';
//* -------------------------------------------------------------------------
//* Realization
//* -------------------------------------------------------------------------
export default function GetFullProperties(initialObject, propertyValidator = (_propertiesPath, _value) => false) {
    const Validator = GlobalModule.Classes.Validator;
    Validator.Strict(initialObject, new Validator().Default.Object().Required());
    Validator.Strict(propertyValidator, new Validator().Default.Function().Required());
    const ObjectProperties = [];
    const ScanObject = (object, propertiesPath) => {
        const ObjectPropertyNames = GlobalModule.Functions.Parameter.Type.Manager.Default.Object.GetProperties(object);
        for (let i = 0; i < ObjectPropertyNames.length; i++) {
            const ObjectPropertyName = ObjectPropertyNames[i];
            const ObjectProperty = object[ObjectPropertyName];
            const IsObjectPropertyValidatedToExecute = propertyValidator(propertiesPath, ObjectProperty);
            const IsObjectPropertyNewSubObject = Validator.TypeGuard.Default.IsObject(ObjectProperty);
            const SubObjectProperties = IsObjectPropertyNewSubObject ? GlobalModule.Functions.Parameter.Type.Manager.Default.Object.GetProperties(ObjectProperty) : [];
            const IsObjectPropertyAbleToBeScanned = IsObjectPropertyNewSubObject && SubObjectProperties.length > 0;
            const NewObjectProperty = {
                Path: [...propertiesPath, ObjectPropertyName],
                Value: ObjectProperty,
            };
            if (!IsObjectPropertyValidatedToExecute && IsObjectPropertyAbleToBeScanned)
                ScanObject(NewObjectProperty.Value, NewObjectProperty.Path);
            else
                ObjectProperties.push(NewObjectProperty);
        }
    };
    ScanObject(initialObject, []);
    const NonModuleProperties = ObjectProperties.filter((_el, _ind, _arr) => {
        const ObjectValue = _el.Value;
        // const ObjectPropertyPath: ObjectProperty['Path'] = _el.Path
        const IsValueFromModuleDescription = Validator.TypeGuard.Default.IsString(ObjectValue) && !Validator.TypeGuard.Default.IsEmptyString(ObjectValue) && ObjectValue === `Module`;
        // const LastObjectPropertyPathName: ObjectProperty['Path'][number] = ObjectPropertyPath[ObjectPropertyPath.length - 1]
        // const IsPathFromModuleDescription: boolean = TypeGuard.Default.IsSymbol(LastObjectPropertyPathName) && LastObjectPropertyPathName.description === Symbol.toStringTag.description
        const IsPropertyFromModule = !IsValueFromModuleDescription; // && !IsPathFromModuleDescription
        return IsPropertyFromModule;
    });
    return NonModuleProperties;
}
//# sourceMappingURL=GetFullProperties.js.map