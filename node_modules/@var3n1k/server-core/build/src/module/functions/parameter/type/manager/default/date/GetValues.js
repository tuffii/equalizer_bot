import * as GlobalModule from '../../../../../../@module.js';
//* -------------------------------------------------------------------------
//* Realization
//* -------------------------------------------------------------------------
export default function GetValues(initialDate = new Date(), localizeTimezoneOffset = false) {
    const Validator = GlobalModule.Classes.Validator;
    Validator.Strict(initialDate, new Validator().Default.Date().Required());
    Validator.Strict(localizeTimezoneOffset, new Validator().Default.Boolean().Required());
    const DateDataSet = GlobalModule.DataSet.Constants.Default.Date;
    const LocalizedDayOfTheWeekNumbers = [7, 1, 2, 3, 4, 5, 6];
    const FullYear = localizeTimezoneOffset ? initialDate.getFullYear() : initialDate.getUTCFullYear();
    const PartYear = FullYear % 100;
    const Month = (localizeTimezoneOffset ? initialDate.getMonth() : initialDate.getUTCMonth()) + 1;
    const MonthFullName = DateDataSet.Month.Name[Month].Full.Single[1];
    const MonthShortName = DateDataSet.Month.Name[Month].Short;
    const DayOfTheMonth = localizeTimezoneOffset ? initialDate.getDate() : initialDate.getUTCDate();
    const Hour = localizeTimezoneOffset ? initialDate.getHours() : initialDate.getUTCHours();
    const Minute = localizeTimezoneOffset ? initialDate.getMinutes() : initialDate.getUTCMinutes();
    const Second = localizeTimezoneOffset ? initialDate.getSeconds() : initialDate.getUTCSeconds();
    const Millisecond = localizeTimezoneOffset ? initialDate.getMilliseconds() : initialDate.getUTCMilliseconds();
    const FirstDayOfTheMonthTiming = new Date(FullYear, Month - 1).getTime() - GlobalModule.Functions.Parameter.Type.Manager.Default.Date.GetTimezoneOffset();
    const FirstDayOfTheMonth = new Date(FirstDayOfTheMonthTiming);
    const FirstDayOfTheMonthDayOfTheWeek = LocalizedDayOfTheWeekNumbers[FirstDayOfTheMonth.getUTCDay()];
    const FirstWeekDayOfTheMonthTiming = new Date(FullYear, Month - 1, 1 + (7 - (FirstDayOfTheMonthDayOfTheWeek - 1))).getTime() - GlobalModule.Functions.Parameter.Type.Manager.Default.Date.GetTimezoneOffset();
    const FirstWeekDayOfTheMonth = new Date(FirstWeekDayOfTheMonthTiming);
    const TimeFromFirstWeek = GlobalModule.Functions.Parameter.Type.Manager.Default.Numeric.ToRange(initialDate.getTime() - FirstWeekDayOfTheMonth.getTime(), 0, undefined);
    const IsFirstDayOfTheMonthFirstDayOfTheWeek = FirstDayOfTheMonthDayOfTheWeek === 1;
    const Week = Math.ceil(TimeFromFirstWeek / (1000 * 60 * 60 * 24 * 7)) + (IsFirstDayOfTheMonthFirstDayOfTheWeek ? 0 : 1);
    const DayOfTheWeek = LocalizedDayOfTheWeekNumbers[localizeTimezoneOffset ? initialDate.getDay() : initialDate.getUTCDay()];
    const DayOfTheWeekFullName = DateDataSet.Week.Day.Name[DayOfTheWeek].Full.Single[1];
    const DayOfTheWeekShortName = DateDataSet.Week.Day.Name[DayOfTheWeek].Short;
    const DateValues = {
        Year: {
            Full: FullYear,
            Part: PartYear,
        },
        Month: {
            Number: Month,
            Name: {
                Full: MonthFullName,
                Short: MonthShortName,
            },
        },
        DayOfTheMonth: DayOfTheMonth,
        Week: Week,
        DayOfTheWeek: {
            Number: DayOfTheWeek,
            Name: {
                Full: DayOfTheWeekFullName,
                Short: DayOfTheWeekShortName,
            },
        },
        Hours: Hour,
        Minutes: Minute,
        Seconds: Second,
        Milliseconds: Millisecond,
    };
    return DateValues;
}
//# sourceMappingURL=GetValues.js.map