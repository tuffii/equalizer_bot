import * as GlobalModule from '../../../../../../@module.js';
//* -------------------------------------------------------------------------
//* Realization
//* -------------------------------------------------------------------------
export default function ToFixed(initialNumber, integerLength = `${Math.floor(initialNumber)}`.length, floatLength = 0, digitSeparator = ``) {
    const Validator = GlobalModule.Classes.Validator;
    Validator.Strict(initialNumber, new Validator().Default.Numeric().Number().Required());
    const IntegerPart = Math.floor(initialNumber);
    const FloatPart = initialNumber - IntegerPart;
    Validator.Strict(integerLength, new Validator().Default.Numeric().Number().Required().Integer().Min(`${IntegerPart}`.length));
    Validator.Strict(floatLength, new Validator().Default.Numeric().Number().Required().Integer().Min(0));
    Validator.Strict(digitSeparator, new Validator().Default.String().Required());
    function SliceNumber(numberToSlice, sliceSensivity, numberSeparator) {
        const NumberParts = [];
        let NumberClone = numberToSlice;
        while (NumberClone.length > 0) {
            const ModifiedNumberClone = NumberClone.split(/[]{0}/).reverse().join(``);
            const NextNumberPart = (ModifiedNumberClone.length > sliceSensivity ? ModifiedNumberClone.slice(0, sliceSensivity) : ModifiedNumberClone).split(/[]{0}/).reverse().join(``);
            const FreeNumberPart = (ModifiedNumberClone.length > NextNumberPart.length ? ModifiedNumberClone.slice(sliceSensivity, ModifiedNumberClone.length) : ``)
                .split(/[]{0}/)
                .reverse()
                .join(``);
            NumberParts.unshift(NextNumberPart);
            NumberClone = FreeNumberPart;
        }
        const SlicedNumber = NumberParts.join(numberSeparator);
        return SlicedNumber;
    }
    const RoundedIntegerPart = floatLength > 0 ? IntegerPart : Math.round(initialNumber);
    const IntegerPartFreeLength = GlobalModule.Functions.Parameter.Type.Manager.Default.Numeric.ToRange(integerLength - `${IntegerPart}`.length, 0, undefined);
    const IntegerPartExtraSymbols = ``.padStart(IntegerPartFreeLength, `${0}`);
    const ModifiedIntegerPart = `${IntegerPartExtraSymbols}${RoundedIntegerPart}`;
    const RoundedFloatPart = Math.round(FloatPart * Math.pow(10, floatLength));
    const FloatPartFreeLength = GlobalModule.Functions.Parameter.Type.Manager.Default.Numeric.ToRange(floatLength - `${RoundedFloatPart}`.length, 0, undefined);
    const FloatPartExtraSymbols = ``.padStart(FloatPartFreeLength, `${0}`);
    const ModifiedFloatPart = `${FloatPartExtraSymbols}${RoundedFloatPart}`;
    const ResultIntegerPart = SliceNumber(ModifiedIntegerPart, 3, digitSeparator);
    const ResultFloatPart = SliceNumber(ModifiedFloatPart, 3, ``);
    // const FixedNumber = `${ResultIntegerPart}${(floatLength > 0) && (parseFloat(`0.${ModifiedFloatPart}`) > 0) ? `.${ResultFloatPart}` : ``}`
    const FixedNumber = `${ResultIntegerPart}${floatLength > 0 ? `.${ResultFloatPart}` : ``}`;
    return FixedNumber;
}
//# sourceMappingURL=ToFixed.js.map