import * as GlobalModule from '../../../../../../../@module.js';
//* -------------------------------------------------------------------------
//* Realization
//* -------------------------------------------------------------------------
export default function InRange(min = 0, max = 1) {
    const Validator = GlobalModule.Classes.Validator;
    Validator.Strict(min, new Validator().Default.Numeric().Required());
    Validator.Strict(max, new Validator().Default.Numeric().Required());
    if (Validator.TypeGuard.Default.IsBigInt(min)) {
        Validator.Strict(max, new Validator().Default.Numeric().BigInt().Required().Min(min));
    }
    else if (Validator.TypeGuard.Default.IsNumber(min)) {
        Validator.Strict(max, new Validator().Default.Numeric().Number().Required().Min(min));
    }
    if (Validator.TypeGuard.Default.IsBigInt(min) && Validator.TypeGuard.Default.IsBigInt(max)) {
        const RandomNumber = BigInt(Math.random()) * (max - min) + min;
        return RandomNumber;
    }
    else if (Validator.TypeGuard.Default.IsNumber(min) && Validator.TypeGuard.Default.IsNumber(max)) {
        const RandomNumber = Math.random() * (max - min) + min;
        return RandomNumber;
    }
    else {
        throw new Validator.TypeError(Validator.TypeError.Code.Default.TypeMatch.Invalid, max, min);
    }
}
//# sourceMappingURL=InRange.js.map