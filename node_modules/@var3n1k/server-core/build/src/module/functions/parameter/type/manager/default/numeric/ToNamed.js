import * as GlobalModule from '../../../../../../@module.js';
//* -------------------------------------------------------------------------
//* Realization
//* -------------------------------------------------------------------------
export default function ToNamed(initialNumber, digitSeparator, namingFor0, namingFor1, namingFor2) {
    const Validator = GlobalModule.Classes.Validator;
    Validator.Strict(initialNumber, new Validator().Default.Numeric().Number().Required().Integer().Min(0));
    Validator.Strict(digitSeparator, new Validator().Default.String().Required());
    Validator.Strict(namingFor0, new Validator().Default.Array().Required().Exact(new Validator().Default.String().MinLength(1), new Validator().Default.String().MinLength(1)));
    Validator.Strict(namingFor1, new Validator().Default.Array().Required().Exact(new Validator().Default.String().MinLength(1), new Validator().Default.String().MinLength(1)));
    Validator.Strict(namingFor2, new Validator().Default.Array().Required().Exact(new Validator().Default.String().MinLength(1), new Validator().Default.String().MinLength(1)));
    const AbsoluteNumber = Math.floor(Math.abs(initialNumber));
    const FixedNumber = GlobalModule.Functions.Parameter.Type.Manager.Default.Numeric.ToFixed(initialNumber, `${Math.floor(initialNumber)}`.length, 0, digitSeparator);
    let NamedNumber = `${FixedNumber}`;
    if (AbsoluteNumber % 10 === 0) {
        const ForwardNamigPart = namingFor0[0];
        const BackwardNamigPart = namingFor0[1];
        const DoesForwardNamigPartExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ForwardNamigPart);
        const DoesBackwardNamigPartExist = !Validator.TypeGuard.Default.IsNullOrUndefined(BackwardNamigPart);
        const NamedNumberParts = [];
        if (DoesForwardNamigPartExist)
            NamedNumberParts.push(ForwardNamigPart);
        NamedNumberParts.push(FixedNumber);
        if (DoesBackwardNamigPartExist)
            NamedNumberParts.push(BackwardNamigPart);
        NamedNumber = NamedNumberParts.join(GlobalModule.DataSet.Dictionary.Symbol.Single.Service.Separator.Space.Default);
    }
    if (AbsoluteNumber % 10 === 1) {
        const ForwardNamigPart = namingFor1[0];
        const BackwardNamigPart = namingFor1[1];
        const DoesForwardNamigPartExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ForwardNamigPart);
        const DoesBackwardNamigPartExist = !Validator.TypeGuard.Default.IsNullOrUndefined(BackwardNamigPart);
        const NamedNumberParts = [];
        if (DoesForwardNamigPartExist)
            NamedNumberParts.push(ForwardNamigPart);
        NamedNumberParts.push(FixedNumber);
        if (DoesBackwardNamigPartExist)
            NamedNumberParts.push(BackwardNamigPart);
        NamedNumber = NamedNumberParts.join(GlobalModule.DataSet.Dictionary.Symbol.Single.Service.Separator.Space.Default);
    }
    if (AbsoluteNumber % 10 >= 2 && AbsoluteNumber % 10 <= 4) {
        const ForwardNamigPart = namingFor2[0];
        const BackwardNamigPart = namingFor2[1];
        const DoesForwardNamigPartExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ForwardNamigPart);
        const DoesBackwardNamigPartExist = !Validator.TypeGuard.Default.IsNullOrUndefined(BackwardNamigPart);
        const NamedNumberParts = [];
        if (DoesForwardNamigPartExist)
            NamedNumberParts.push(ForwardNamigPart);
        NamedNumberParts.push(FixedNumber);
        if (DoesBackwardNamigPartExist)
            NamedNumberParts.push(BackwardNamigPart);
        NamedNumber = NamedNumberParts.join(GlobalModule.DataSet.Dictionary.Symbol.Single.Service.Separator.Space.Default);
    }
    if (AbsoluteNumber % 10 >= 5 && AbsoluteNumber % 10 <= 9) {
        const ForwardNamigPart = namingFor0[0];
        const BackwardNamigPart = namingFor0[1];
        const DoesForwardNamigPartExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ForwardNamigPart);
        const DoesBackwardNamigPartExist = !Validator.TypeGuard.Default.IsNullOrUndefined(BackwardNamigPart);
        const NamedNumberParts = [];
        if (DoesForwardNamigPartExist)
            NamedNumberParts.push(ForwardNamigPart);
        NamedNumberParts.push(FixedNumber);
        if (DoesBackwardNamigPartExist)
            NamedNumberParts.push(BackwardNamigPart);
        NamedNumber = NamedNumberParts.join(GlobalModule.DataSet.Dictionary.Symbol.Single.Service.Separator.Space.Default);
    }
    if (AbsoluteNumber % 100 >= 11 && AbsoluteNumber % 100 <= 19) {
        const ForwardNamigPart = namingFor0[0];
        const BackwardNamigPart = namingFor0[1];
        const DoesForwardNamigPartExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ForwardNamigPart);
        const DoesBackwardNamigPartExist = !Validator.TypeGuard.Default.IsNullOrUndefined(BackwardNamigPart);
        const NamedNumberParts = [];
        if (DoesForwardNamigPartExist)
            NamedNumberParts.push(ForwardNamigPart);
        NamedNumberParts.push(FixedNumber);
        if (DoesBackwardNamigPartExist)
            NamedNumberParts.push(BackwardNamigPart);
        NamedNumber = NamedNumberParts.join(GlobalModule.DataSet.Dictionary.Symbol.Single.Service.Separator.Space.Default);
    }
    return NamedNumber;
}
//# sourceMappingURL=ToNamed.js.map