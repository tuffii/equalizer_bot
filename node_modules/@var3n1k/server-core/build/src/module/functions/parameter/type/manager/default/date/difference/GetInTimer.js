import * as GlobalModule from '../../../../../../../@module.js';
//* -------------------------------------------------------------------------
//* Realization
//* -------------------------------------------------------------------------
export default function GetInTimer(from, to, useYears = false, useMonths = false, useDays = false, useHours = false, useMs = false) {
    const Validator = GlobalModule.Classes.Validator;
    Validator.Strict(from, new Validator().Default.Date().Required());
    Validator.Strict(to, new Validator().Default.Date().Required());
    Validator.Strict(useYears, new Validator().Default.Boolean().Required());
    Validator.Strict(useMonths, new Validator().Default.Boolean().Required());
    Validator.Strict(useDays, new Validator().Default.Boolean().Required());
    Validator.Strict(useHours, new Validator().Default.Boolean().Required());
    Validator.Strict(useMs, new Validator().Default.Boolean().Required());
    if (useYears && !useMonths) {
        throw new Validator.TypeError(Validator.TypeError.Code.Default.Boolean.Unexpected, useMonths, []);
    }
    if (useMonths && !useDays) {
        throw new Validator.TypeError(Validator.TypeError.Code.Default.Boolean.Unexpected, useDays, []);
    }
    if (useDays && !useHours) {
        throw new Validator.TypeError(Validator.TypeError.Code.Default.Boolean.Unexpected, useHours, []);
    }
    const DatesDifferenceValues = GlobalModule.Functions.Parameter.Type.Manager.Default.Date.Difference.GetValues(from, to);
    const DifferenceYears = DatesDifferenceValues.Years.Local;
    const DifferenceYearsLength = GlobalModule.Functions.Parameter.Type.Manager.Default.Numeric.ToRange(`${DifferenceYears}`.length, 2, undefined);
    const DifferenceYearsToString = GlobalModule.Functions.Parameter.Type.Manager.Default.Numeric.ToFixed(DifferenceYears, DifferenceYearsLength, 0, ``);
    const DifferenceMonths = useYears ? DatesDifferenceValues.Months.Local : DatesDifferenceValues.Months.Total;
    const DifferenceMonthsLength = useYears ? 2 : GlobalModule.Functions.Parameter.Type.Manager.Default.Numeric.ToRange(`${DifferenceMonths}`.length, 2, undefined);
    const DifferenceMonthsToString = GlobalModule.Functions.Parameter.Type.Manager.Default.Numeric.ToFixed(DifferenceMonths, DifferenceMonthsLength, 0, ``);
    const DifferenceDays = useMonths ? DatesDifferenceValues.Days.Local : DatesDifferenceValues.Days.Total;
    const DifferenceDaysLength = useMonths ? 2 : GlobalModule.Functions.Parameter.Type.Manager.Default.Numeric.ToRange(`${DifferenceDays}`.length, 2, undefined);
    const DifferenceDaysToString = GlobalModule.Functions.Parameter.Type.Manager.Default.Numeric.ToFixed(DifferenceDays, DifferenceDaysLength, 0, ``);
    const DifferenceHours = useDays ? DatesDifferenceValues.Hours.Local : DatesDifferenceValues.Hours.Total;
    const DifferenceHoursLength = useDays ? 2 : GlobalModule.Functions.Parameter.Type.Manager.Default.Numeric.ToRange(`${DifferenceHours}`.length, 2, undefined);
    const DifferenceHoursToString = GlobalModule.Functions.Parameter.Type.Manager.Default.Numeric.ToFixed(DifferenceHours, DifferenceHoursLength, 0, ``);
    const DifferenceMinutes = useHours ? DatesDifferenceValues.Minutes.Local : DatesDifferenceValues.Minutes.Total;
    const DifferenceMinutesLength = useHours ? 2 : GlobalModule.Functions.Parameter.Type.Manager.Default.Numeric.ToRange(`${DifferenceMinutes}`.length, 2, undefined);
    const DifferenceMinutesToString = GlobalModule.Functions.Parameter.Type.Manager.Default.Numeric.ToFixed(DifferenceMinutes, DifferenceMinutesLength, 0, ``);
    const DifferenceSeconds = DatesDifferenceValues.Seconds.Local;
    const DifferenceSecondsLength = 2;
    const DifferenceSecondsToString = GlobalModule.Functions.Parameter.Type.Manager.Default.Numeric.ToFixed(DifferenceSeconds, DifferenceSecondsLength, 0, ``);
    const DifferenceMilliseconds = DatesDifferenceValues.Milliseconds.Local;
    const DifferenceMillisecondsLength = 3;
    const DifferenceMillisecondsToString = GlobalModule.Functions.Parameter.Type.Manager.Default.Numeric.ToFixed(DifferenceMilliseconds, DifferenceMillisecondsLength, 0, ``);
    const ResultDifferenceMilliseconds = useMs ? `.${DifferenceMillisecondsToString}` : ``;
    const ResultDifferenceValuesToString = [];
    if (useYears)
        ResultDifferenceValuesToString.push(DifferenceYearsToString);
    if (useMonths)
        ResultDifferenceValuesToString.push(DifferenceMonthsToString);
    if (useDays)
        ResultDifferenceValuesToString.push(DifferenceDaysToString);
    if (useHours)
        ResultDifferenceValuesToString.push(DifferenceHoursToString);
    ResultDifferenceValuesToString.push(DifferenceMinutesToString);
    ResultDifferenceValuesToString.push(DifferenceSecondsToString);
    const ResultDifference = `${ResultDifferenceValuesToString.join(`:`)}${ResultDifferenceMilliseconds}`;
    return ResultDifference;
}
//# sourceMappingURL=GetInTimer.js.map