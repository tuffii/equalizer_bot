import * as GlobalModule from '../../../../../../../../@module.js';
const InscriptionMaskType = {
    Bold: `bold`,
    Italic: `italic`,
    Overline: `overline`,
    Strikethrough: `strikethrough`,
    Underline: `underline`,
    Dim: `dim`,
    Hidden: `hidden`,
    Inverse: `inverse`,
};
Inscription.Type = InscriptionMaskType;
const InscriptionMaskCode = {
    [InscriptionMaskType.Bold]: { Open: 1, Close: 22 },
    [InscriptionMaskType.Italic]: { Open: 3, Close: 23 },
    [InscriptionMaskType.Overline]: { Open: 53, Close: 55 },
    [InscriptionMaskType.Strikethrough]: { Open: 9, Close: 29 },
    [InscriptionMaskType.Underline]: { Open: 4, Close: 24 },
    [InscriptionMaskType.Dim]: { Open: 2, Close: 22 },
    [InscriptionMaskType.Hidden]: { Open: 8, Close: 28 },
    [InscriptionMaskType.Inverse]: { Open: 7, Close: 27 },
};
const InscriptionMaskForm = {
    Open: (_) => `\u001B[${_}m`,
    Close: (_) => `\u001B[${_}m`,
};
//* -------------------------------------------------------------------------
//* Realization
//* -------------------------------------------------------------------------
export default function Inscription(initialString, inscriptionType) {
    const InscriptionTypes = GlobalModule.Functions.Parameter.Type.Manager.Default.Object.GetProperties(Inscription.Type).map((_el, _ind, _arr) => Inscription.Type[_el]);
    const Validator = GlobalModule.Classes.Validator;
    Validator.Strict(initialString, new Validator().Default.String().Required());
    Validator.Strict(inscriptionType, new Validator().Default.String().Required().In(InscriptionTypes));
    const InscriptionMask = InscriptionMaskCode[inscriptionType];
    const ModifiedString = `${InscriptionMaskForm.Open(InscriptionMask.Open)}${initialString}${InscriptionMaskForm.Close(InscriptionMask.Close)}`;
    return ModifiedString;
}
//# sourceMappingURL=Inscription.js.map