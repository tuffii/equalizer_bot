import * as GlobalModule from '../../../../../../@module.js';
//* -------------------------------------------------------------------------
//* Realization
//* -------------------------------------------------------------------------
export default function Copy(initialArray) {
    const Validator = GlobalModule.Classes.Validator;
    Validator.Strict(initialArray, new Validator().Default.Array().Required());
    const CopyArrayLevel = (arrayLevel) => {
        const ArrayLevelCopy = [];
        for (let i = 0; i < arrayLevel.length; i++) {
            const InitialArrayLevelElement = arrayLevel[i];
            const IsInitialArrayLevelElementObject = Validator.TypeGuard.Default.IsObject(InitialArrayLevelElement);
            const IsInitialArrayLevelElementArray = Validator.TypeGuard.Default.IsArray(InitialArrayLevelElement);
            const IsInitialArrayLevelElementNeedToBeCopied = IsInitialArrayLevelElementObject || IsInitialArrayLevelElementArray;
            if (IsInitialArrayLevelElementNeedToBeCopied) {
                if (IsInitialArrayLevelElementObject) {
                    ArrayLevelCopy.push(GlobalModule.Functions.Parameter.Type.Manager.Default.Object.Copy(InitialArrayLevelElement));
                }
                else {
                    if (IsInitialArrayLevelElementArray) {
                        ArrayLevelCopy.push(CopyArrayLevel(InitialArrayLevelElement));
                    }
                }
            }
            else {
                ArrayLevelCopy.push(InitialArrayLevelElement);
            }
        }
        const CopiedArrayLevel = [...ArrayLevelCopy];
        return CopiedArrayLevel;
    };
    const CopiedArray = CopyArrayLevel(initialArray);
    return CopiedArray;
}
//# sourceMappingURL=Copy.js.map