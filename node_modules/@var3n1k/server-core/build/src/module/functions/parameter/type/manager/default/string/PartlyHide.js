import * as GlobalModule from '../../../../../../@module.js';
//* -------------------------------------------------------------------------
//* Realization
//* -------------------------------------------------------------------------
export default function PartlyHide(initialString, displaySettings) {
    const Validator = GlobalModule.Classes.Validator;
    Validator.Strict(initialString, new Validator().Default.String().Required());
    Validator.Strict(displaySettings, new Validator().Default.Object()
        .Required()
        .Exact({
        Start: new Validator().Default.Object()
            .Required()
            .Exact({
            Display: new Validator().Default.Boolean().Required(),
            Length: new Validator().Default.Numeric().Number().Required().Integer().Min(0).Max(initialString.length),
        }),
        Center: new Validator().Default.Object()
            .Required()
            .Exact({
            Display: new Validator().Default.Boolean().Required(),
            Length: new Validator().Default.Numeric().Number().Required().Integer().Min(0).Max(initialString.length),
        }),
        End: new Validator().Default.Object()
            .Required()
            .Exact({
            Display: new Validator().Default.Boolean().Required(),
            Length: new Validator().Default.Numeric().Number().Required().Integer().Min(0).Max(initialString.length),
        }),
    }));
    Validator.Strict([displaySettings.Start.Display, displaySettings.Center.Display, displaySettings.End.Display], new Validator().Default.Array()
        .Required()
        .Custom((_) => _.some((_el, _ind, _arr) => _el), (_) => [`Ожидалось оказание хотябы одного параметра для вывода`]));
    Validator.Strict(displaySettings.Start.Length + displaySettings.Center.Length + displaySettings.End.Length, new Validator().Default.Numeric().Number().Required().Integer().Min(0).Max(initialString.length));
    const PartlyHideStringParts = [];
    if (displaySettings.Start.Display) {
        const PartlyHideStartStringPart = initialString.slice(0, displaySettings.Start.Length);
        PartlyHideStringParts.push(PartlyHideStartStringPart);
    }
    if (displaySettings.Center.Display) {
        const PartlyHideStringCenterIndex = Math.floor(initialString.length / 2);
        const PartlyHideStringCenterStartIndex = PartlyHideStringCenterIndex - Math.floor(displaySettings.Center.Length / 2);
        const PartlyHideStringCenterEndIndex = PartlyHideStringCenterStartIndex + displaySettings.Start.Length;
        const PartlyHideCenterStringPart = initialString.slice(PartlyHideStringCenterStartIndex, PartlyHideStringCenterEndIndex);
        PartlyHideStringParts.push(PartlyHideCenterStringPart);
    }
    if (displaySettings.End.Display) {
        const PartlyHideEndStringPart = initialString.slice(initialString.length - displaySettings.End.Length, initialString.length);
        PartlyHideStringParts.push(PartlyHideEndStringPart);
    }
    if (PartlyHideStringParts.length === 1) {
        if (displaySettings.Start.Display) {
            const PartlyHideString = `${PartlyHideStringParts.join(``)}.....`;
            return PartlyHideString;
        }
        else if (displaySettings.End.Display) {
            const PartlyHideString = `.....${PartlyHideStringParts.join(``)}`;
            return PartlyHideString;
        }
        else {
            const PartlyHideString = `...${PartlyHideStringParts.join(``)}...`;
            return PartlyHideString;
        }
    }
    else if (PartlyHideStringParts.length === 2) {
        const PartlyHideString = PartlyHideStringParts.join(`.....`);
        return PartlyHideString;
    }
    else {
        const PartlyHideString = PartlyHideStringParts.join(`...`);
        return PartlyHideString;
    }
}
//# sourceMappingURL=PartlyHide.js.map