import * as GlobalModule from '../../../../module/@module.js';
import * as PostgreSQLAPI from '../__api.js';
export * as Tables from './tables/__tables.js';
import * as Dependencies from '../__dependencies.js';
export default class BaseDataBase {
    // TODO: JSDoc
    Name;
    // TODO: JSDoc
    __API;
    // TODO: JSDoc
    __Pool;
    // TODO: JSDoc
    async Request(queryString) {
        const Response = await this.__Request(queryString);
        return Response;
    }
    // TODO: JSDoc
    constructor(api, name) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(api, new Validator().Default.Class.Instance().Required().Of(PostgreSQLAPI.default));
        Validator.Strict(name, new Validator().Default.String().Required().MinLength(1));
        this.__API = api;
        this.Name = name;
        this.__Pool = this.__CreatePool();
    }
    // TODO: JSDoc
    async __Request(queryString) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(queryString, new Validator().Default.String().Required().MinLength(1));
        const AsyncQuery = async (query) => {
            return new Promise(async (resolve, reject) => {
                this.__Pool.query(query, (queryError, queryResult) => {
                    const IsQueryErrorOccured = Validator.TypeGuard.Default.IsError(queryError);
                    if (IsQueryErrorOccured) {
                        this.__API.Log.Preset.Warn(`При выполнении SQL-запроса в базе данных '${this.Name}' произошла непредвиденная ошибка`);
                        throw queryError;
                    }
                    resolve(queryResult);
                });
            });
        };
        const Response = await AsyncQuery(queryString);
        return Response;
    }
    // TODO: JSDoc
    __CreatePool() {
        try {
            const NewConnection = new Dependencies.pg.Pool({
                user: this.__API.Client.Credentials.User.Name,
                password: this.__API.Client.Credentials.User.Password,
                host: this.__API.Client.Credentials.Connection.Host.Name,
                port: this.__API.Client.Credentials.Connection.Host.Port,
                database: this.Name,
            });
            return NewConnection;
        }
        catch (APIError) {
            this.__API.Log.Preset.Warn(`При подключении к базе данных '${this.Name}' через пользователя '${this.__API.Client.Credentials.User.Name}' произошла непредвиденная ошибка`);
            throw APIError;
        }
    }
}
//# sourceMappingURL=BaseDataBase.js.map