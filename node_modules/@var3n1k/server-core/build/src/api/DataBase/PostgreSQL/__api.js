import * as GlobalModule from '../../../module/@module.js';
import { default as BaseAPI } from '../../BaseAPI.js';
import * as DataBases from './databases/__databases.js';
const EventName = {
    DataBase: {
        Table: {
            Create: `databaseTableCreate`,
            Delete: `databaseTableDelete`,
            Validate: {
                Existance: `databaseTableValidateExistance`,
            },
            Elements: {
                Insert: `databaseTableElementsInsert`,
                Update: `databaseTableElementsUpdate`,
                Select: `databaseTableElementsSelect`,
                Delete: `databaseTableElementsDelete`,
            },
        },
    },
};
export * as DataBases from './databases/__databases.js';
class PostgreSQLAPI extends BaseAPI {
    // TODO: JSDoc
    static Event = { Name: EventName };
    // TODO: JSDoc
    Event = { Emitter: new GlobalModule.Classes.EventEmitter() };
    // TODO: JSDoc
    Client;
    // TODO: JSDoc
    Connect(databaseDeclaration, databaseName) {
        const ConnectedDataBase = this.__Connect(databaseDeclaration, databaseName);
        return ConnectedDataBase;
    }
    // TODO: JSDoc
    constructor(user, password, hostName, port) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(user, new Validator().Default.String().Required().MinLength(1));
        Validator.Strict(password, new Validator().Default.String().Required().MinLength(1));
        Validator.Strict(hostName, new Validator().Default.String().Required().MinLength(1));
        Validator.Strict(port, new Validator().Default.Numeric().Number().Required().Integer().Min(0));
        const APIFullTag = (tags) => {
            Validator.Strict(tags, new Validator().Default.Array().Required().Of(new Validator().Default.String().Required().MinLength(1)));
            const FullTagParameters = [];
            FullTagParameters.push(`PostgreSQL`);
            FullTagParameters.push(...tags);
            FullTagParameters.push(`${hostName}:${port}`);
            FullTagParameters.push(`${user}`);
            const SpaceSymbol = GlobalModule.DataSet.Dictionary.Symbol.Single.Service.Separator.Space.Default;
            const FullTag = FullTagParameters.join(`${SpaceSymbol}|${SpaceSymbol}`);
            return FullTag;
        };
        const APITag = {
            Text: APIFullTag([]),
            Color: GlobalModule.Functions.Parameter.Type.Manager.Custom.Color.HEXToRGB(`#326690`),
        };
        super({
            Tag: {
                Text: APITag.Text,
                Color: APITag.Color,
            },
        });
        this.Client = {
            Credentials: {
                User: {
                    Name: user,
                    Password: password,
                },
                Connection: {
                    Host: {
                        Name: hostName,
                        Port: port,
                    },
                },
            },
        };
        this.__RegisterMetrics();
        this._SetReady(true);
    }
    // TODO: JSDoc
    __Connect(databaseDeclaration, databaseName) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(databaseDeclaration, new Validator().Default.Class.Declaration().Required());
        Validator.Strict(databaseName, new Validator().Default.String().Required().MinLength(1));
        try {
            const DataBase = new databaseDeclaration(this, databaseName);
            Validator.Strict(DataBase, new Validator().Default.Class.Instance().Required().Of(DataBases.BaseDataBase));
            return DataBase;
        }
        catch (APIError) {
            this.Log.Preset.Warn(`При добавлении базы данных '${databaseName}' произошла непредвиденная ошибка`);
            throw APIError;
        }
    }
    // TODO: JSDoc
    __RegisterHandlers() { }
    // TODO: JSDoc
    __RegisterMetrics() {
        this.__RegisterHandlers();
    }
}
export default PostgreSQLAPI;
//# sourceMappingURL=__api.js.map