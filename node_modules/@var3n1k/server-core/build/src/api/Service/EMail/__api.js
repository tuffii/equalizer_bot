import * as GlobalModule from '../../../module/@module.js';
import { default as BaseAPI } from '../../BaseAPI.js';
import * as Dependencies from './__dependencies.js';
export default class EMailService extends BaseAPI {
    // TODO: JSDoc
    Client;
    // TODO: JSDoc
    __Transporter;
    // TODO: JSDoc
    async SendMail(targetAdress, mailSubject, mailContent, mailHTMLContent) {
        await this.__SendMail(targetAdress, mailSubject, mailContent, mailHTMLContent);
    }
    // TODO: JSDoc
    constructor(user, password, hostName, port) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(user, new Validator().Default.String().Required().MinLength(1));
        Validator.Strict(password, new Validator().Default.String().Required().MinLength(1));
        Validator.Strict(hostName, new Validator().Default.String().Required().MinLength(1));
        Validator.Strict(port, new Validator().Default.Numeric().Number().Required().Integer().Min(0));
        const APIFullTag = (tags) => {
            Validator.Strict(tags, new Validator().Default.Array().Required().Of(new Validator().Default.String().Required().MinLength(1)));
            const FullTagParameters = [];
            FullTagParameters.push(`EMail`);
            FullTagParameters.push(...tags);
            FullTagParameters.push(`${user}`);
            const SpaceSymbol = GlobalModule.DataSet.Dictionary.Symbol.Single.Service.Separator.Space.Default;
            const FullTag = FullTagParameters.join(`${SpaceSymbol}|${SpaceSymbol}`);
            return FullTag;
        };
        const APITag = {
            Text: APIFullTag([]),
            Color: GlobalModule.Functions.Parameter.Type.Manager.Custom.Color.HEXToRGB(`#34A853`),
        };
        super({
            Tag: {
                Text: APITag.Text,
                Color: APITag.Color,
            },
        });
        this.Client = {
            Credentials: {
                Connection: {
                    Host: {
                        Name: hostName,
                        Port: port,
                    },
                },
                User: {
                    Name: user,
                    Password: password,
                },
            },
        };
        this.__Transporter = Dependencies.NodeMailer.createTransport({
            host: hostName,
            port: port,
            secure: false,
            auth: {
                user: user,
                pass: password,
            },
        });
        this._SetReady(true);
    }
    // TODO: JSDoc
    async __SendMail(targetAdress, mailSubject, mailContent, mailHTMLContent) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(targetAdress, new Validator().Default.String().Required().MinLength(1));
        Validator.Strict(mailSubject, new Validator().Default.String().Required());
        Validator.Strict(mailContent, new Validator().Default.String().Required());
        Validator.Strict(mailHTMLContent, new Validator().Default.String().Required());
        try {
            await this.__Transporter.sendMail({
                from: this.Client.Credentials.User.Name,
                to: targetAdress,
                subject: mailSubject,
                text: mailContent,
                html: mailHTMLContent,
            });
            this.Log.Preset.Info(`Отправлено письмо с темой '${mailSubject}' на адрес '${targetAdress}'`);
        }
        catch (APIError) {
            this.Log.Preset.Warn(`При отправке письма с темой '${mailSubject}' на адрес '${targetAdress}' произошла непредвиденная ошибка`);
            throw APIError;
        }
    }
}
//# sourceMappingURL=__api.js.map