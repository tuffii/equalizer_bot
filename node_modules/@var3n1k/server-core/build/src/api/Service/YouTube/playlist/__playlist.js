import * as GlobalModule from '../../../../module/@module.js';
import * as YouTubeService from '../__api.js';
import * as Channel from '../channel/__channel.js';
import * as Video from '../video/__video.js';
export default class YouTubePlaylist {
    // TODO: JSDoc
    ID;
    // TODO: JSDoc
    URL;
    // TODO: JSDoc
    Title;
    // TODO: JSDoc
    Description;
    // TODO: JSDoc
    Author;
    // TODO: JSDoc
    Views;
    // TODO: JSDoc
    Date;
    // TODO: JSDoc
    Thumbnails;
    // TODO: JSDoc
    Videos;
    // TODO: JSDoc
    constructor(searchByIDQueryResults, playlistAuthor, playlistVideos) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(searchByIDQueryResults, new Validator().Default.Array().Required().Length(2));
        Validator.Strict(playlistAuthor, new Validator().Default.Class.Instance().Required().Of(Channel.default));
        Validator.Strict(playlistVideos, new Validator().Default.Array().Required().Of(new Validator().Default.Class.Instance().Required().Of(Video.default)).MinLength(1));
        const PlaylistStructure = YouTubePlaylist.__FormStructure(searchByIDQueryResults);
        this.ID = PlaylistStructure.ID;
        this.URL = PlaylistStructure.URL;
        this.Title = PlaylistStructure.Title;
        this.Description = PlaylistStructure.Description;
        this.Author = playlistAuthor;
        this.Views = PlaylistStructure.Views;
        this.Date = {
            Update: PlaylistStructure.Date.Update,
        };
        this.Thumbnails = PlaylistStructure.Thumbnails;
        this.Videos = playlistVideos;
    }
    // TODO: JSDoc
    static __FormStructure(searchByIDQueryResults) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(searchByIDQueryResults, new Validator().Default.Array().Required().Length(2));
        const PlaylistStructureData = {
            ID: [],
            URL: [],
            Title: [],
            Description: [],
            Views: [],
            Date: {
                Update: [],
            },
            Thumbnails: [],
        };
        const PlaylistStructureDataValidator = {
            ID: new Validator().Default.String()
                .Required()
                .MinLength(1)
                .Custom((_) => YouTubeService.default.IsPlaylistID(_), (_) => []),
            URL: new Validator().Default.String()
                .Required()
                .MinLength(1)
                .Custom((_) => YouTubeService.default.IsPlaylistURL(_), (_) => []),
            Title: new Validator().Default.String().Required().MinLength(1),
            Description: new Validator().Default.String().MinLength(1),
            Views: new Validator().Default.Numeric().Number().Required().Integer().Min(0),
            Date: {
                Update: new Validator().Default.Date().Required(),
            },
            Thumbnails: new Validator().Default.Array()
                .Required()
                .Of(new Validator().Default.Object()
                .Required()
                .Exact({
                URL: new Validator().Default.String().Required().MinLength(1),
                Size: new Validator().Default.Object()
                    .Required()
                    .Exact({
                    Width: new Validator().Default.Numeric().Number().Required().Integer().Min(1),
                    Height: new Validator().Default.Numeric().Number().Required().Integer().Min(1),
                }),
            }))
                .MinLength(0),
        };
        const PlaylistStructureValidator = new Validator().Default.Object()
            .Required()
            .Exact({
            ID: PlaylistStructureDataValidator.ID,
            URL: PlaylistStructureDataValidator.URL,
            Title: PlaylistStructureDataValidator.Title,
            Description: PlaylistStructureDataValidator.Description,
            Views: PlaylistStructureDataValidator.Views,
            Date: new Validator().Default.Object().Required().Exact({
                Update: PlaylistStructureDataValidator.Date.Update,
            }),
            Thumbnails: PlaylistStructureDataValidator.Thumbnails,
        });
        const YTPLPlaylistInfo = searchByIDQueryResults[0];
        const DoesYTPLPlaylistInfoExist = !Validator.TypeGuard.Default.IsNullOrUndefined(YTPLPlaylistInfo);
        if (DoesYTPLPlaylistInfoExist) {
            const YTPLPlaylistDetails = YTPLPlaylistInfo;
            PlaylistStructureData.ID.push(YTPLPlaylistDetails.id);
            PlaylistStructureData.URL.push(YTPLPlaylistDetails.url);
            PlaylistStructureData.Title.push(YTPLPlaylistDetails.title);
            PlaylistStructureData.Description.push(YTPLPlaylistDetails.description);
            const PlaylistViews = YTPLPlaylistDetails.views;
            const DoesPlaylistViewsExist = !Validator.TypeGuard.Default.IsNullOrUndefined(PlaylistViews);
            const IsPlaylistViewsValid = DoesPlaylistViewsExist && Validator.TypeGuard.Default.IsInteger(PlaylistViews);
            const FixedPlaylistViews = IsPlaylistViewsValid ? PlaylistViews : 0;
            PlaylistStructureData.Views.push(FixedPlaylistViews);
            const PlaylistUpdateDate = YTPLPlaylistDetails.lastUpdated;
            const DoesPlaylistUpdateDateExist = !Validator.TypeGuard.Default.IsNullOrUndefined(PlaylistUpdateDate);
            const IsPlaylistUpdateDateValid = DoesPlaylistUpdateDateExist && Validator.TypeGuard.Default.IsDate(new Date(PlaylistUpdateDate));
            const FixedPlaylistUpdateDate = IsPlaylistUpdateDateValid ? new Date(PlaylistUpdateDate) : new Date();
            PlaylistStructureData.Date.Update.push(FixedPlaylistUpdateDate);
            PlaylistStructureData.Thumbnails.push(Validator.TypeGuard.Default.IsArray(YTPLPlaylistDetails.thumbnails)
                ? GlobalModule.Functions.Parameter.Type.Manager.Default.Array.Copy(YTPLPlaylistDetails.thumbnails)
                    .sort((_a, _b) => _b.width - _a.width)
                    .filter((_el, _ind, _arr) => {
                    const ThumbnailURL = _el.url;
                    const DoesThumbnailURLExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ThumbnailURL);
                    const IsThumbnailValid = DoesThumbnailURLExist;
                    return IsThumbnailValid;
                })
                    .map((_el, _ind, _arr) => {
                    const Thumbnail = {
                        URL: _el.url,
                        Size: {
                            Width: _el.width,
                            Height: _el.height,
                        },
                    };
                    return Thumbnail;
                })
                : []);
        }
        const YTSearchPlaylistInfo = searchByIDQueryResults[1];
        const DoesYTSearchPlaylistInfoExist = !Validator.TypeGuard.Default.IsNullOrUndefined(YTSearchPlaylistInfo);
        if (DoesYTSearchPlaylistInfoExist) {
            const YTSearchPlaylistDetails = YTSearchPlaylistInfo;
            PlaylistStructureData.ID.push(YTSearchPlaylistDetails.listId);
            PlaylistStructureData.URL.push(YTSearchPlaylistDetails.url);
            PlaylistStructureData.Title.push(YTSearchPlaylistDetails.title);
            const PlaylistViews = YTSearchPlaylistDetails.views;
            const DoesPlaylistViewsExist = !Validator.TypeGuard.Default.IsNullOrUndefined(PlaylistViews);
            const IsPlaylistViewsValid = DoesPlaylistViewsExist && Validator.TypeGuard.Default.IsInteger(PlaylistViews);
            const FixedPlaylistViews = IsPlaylistViewsValid ? PlaylistViews : 0;
            PlaylistStructureData.Views.push(FixedPlaylistViews);
            const PlaylistUpdateDate = YTSearchPlaylistDetails.date;
            const DoesPlaylistUpdateDateExist = !Validator.TypeGuard.Default.IsNullOrUndefined(PlaylistUpdateDate);
            const IsPlaylistUpdateDateValid = DoesPlaylistUpdateDateExist && Validator.TypeGuard.Default.IsDate(new Date(PlaylistUpdateDate));
            const FixedPlaylistUpdateDate = IsPlaylistUpdateDateValid ? new Date(PlaylistUpdateDate) : new Date();
            PlaylistStructureData.Date.Update.push(FixedPlaylistUpdateDate);
        }
        const PlaylistStructure = {
            ID: Validator.GetOneOf(PlaylistStructureData.ID, PlaylistStructureDataValidator.ID),
            URL: Validator.GetOneOf(PlaylistStructureData.URL, PlaylistStructureDataValidator.URL),
            Title: Validator.GetOneOf(PlaylistStructureData.Title, PlaylistStructureDataValidator.Title),
            Description: Validator.GetOneOf(PlaylistStructureData.Description, PlaylistStructureDataValidator.Description),
            Views: Validator.GetOneOf(PlaylistStructureData.Views, PlaylistStructureDataValidator.Views),
            Date: {
                Update: Validator.GetOneOf(PlaylistStructureData.Date.Update, PlaylistStructureDataValidator.Date.Update),
            },
            Thumbnails: Validator.GetOneOf(PlaylistStructureData.Thumbnails, PlaylistStructureDataValidator.Thumbnails),
        };
        Validator.Strict(PlaylistStructure, PlaylistStructureValidator);
        return PlaylistStructure;
    }
}
//# sourceMappingURL=__playlist.js.map