import * as GlobalModule from '../../../../module/@module.js';
import * as YouTubeService from '../__api.js';
import * as Channel from '../channel/__channel.js';
export default class YouTubeVideo {
    // TODO: JSDoc
    ID;
    // TODO: JSDoc
    URL;
    // TODO: JSDoc
    Title;
    // TODO: JSDoc
    Description;
    // TODO: JSDoc
    Author;
    // TODO: JSDoc
    Duration;
    // TODO: JSDoc
    Views;
    // TODO: JSDoc
    Date;
    // TODO: JSDoc
    Thumbnails;
    // TODO: JSDoc
    Related;
    // TODO: JSDoc
    Resource;
    // TODO: JSDoc
    Settings;
    // TODO: JSDoc
    constructor(searchByIDQueryResults, videoAuthor) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(searchByIDQueryResults, new Validator().Default.Array().Required().Length(3));
        Validator.Strict(videoAuthor, new Validator().Default.Class.Instance().Required().Of(Channel.default));
        const VideoStructure = YouTubeVideo.__FormStructure(searchByIDQueryResults);
        this.ID = VideoStructure.ID;
        this.URL = VideoStructure.URL;
        this.Title = VideoStructure.Title;
        this.Description = VideoStructure.Description;
        this.Author = videoAuthor;
        this.Duration = VideoStructure.Duration;
        this.Views = VideoStructure.Views;
        this.Date = {
            Publish: VideoStructure.Date.Publish,
            Upload: VideoStructure.Date.Upload,
        };
        this.Thumbnails = VideoStructure.Thumbnails;
        this.Related = {
            Videos: VideoStructure.Related.Videos,
        };
        const ResourceBitrateSort = (prevResource, nextResource) => {
            const PreviousResourceAudioBitrate = prevResource.audioBitrate;
            const DoesPreviousResourceAudioBitrateExist = !Validator.TypeGuard.Default.IsNullOrUndefined(PreviousResourceAudioBitrate);
            const PreviousResourceBitrate = prevResource.bitrate;
            const DoesPreviousResourceBitrateExist = !Validator.TypeGuard.Default.IsNullOrUndefined(PreviousResourceBitrate);
            const NextResourceAudioBitrate = nextResource.audioBitrate;
            const DoesNextResourceAudioBitrateExist = !Validator.TypeGuard.Default.IsNullOrUndefined(NextResourceAudioBitrate);
            const NextResourceBitrate = nextResource.bitrate;
            const DoesNextResourceBitrateExist = !Validator.TypeGuard.Default.IsNullOrUndefined(NextResourceBitrate);
            if (DoesPreviousResourceAudioBitrateExist && DoesNextResourceAudioBitrateExist) {
                const ResourceAudioBitrateDifference = NextResourceAudioBitrate - PreviousResourceAudioBitrate;
                return ResourceAudioBitrateDifference;
            }
            else {
                if (DoesPreviousResourceBitrateExist && DoesNextResourceBitrateExist) {
                    const ResourceAudioBitrateDifference = NextResourceBitrate - PreviousResourceBitrate;
                    return ResourceAudioBitrateDifference;
                }
                else {
                    const ResourceAudioBitrateDifference = 0;
                    return ResourceAudioBitrateDifference;
                }
            }
        };
        const ResourceVideoSort = (prevResource, nextResource) => {
            const PreviousResourceHasVideo = prevResource.hasVideo;
            const DoesPreviousResourceHasVideoExist = !Validator.TypeGuard.Default.IsNullOrUndefined(PreviousResourceHasVideo);
            const FixedPreviousResourceHasVideo = DoesPreviousResourceHasVideoExist && PreviousResourceHasVideo;
            const NextResourceHasVideo = nextResource.hasVideo;
            const DoesNextResourceHasVideoExist = !Validator.TypeGuard.Default.IsNullOrUndefined(PreviousResourceHasVideo);
            const FixedNextResourceHasVideo = DoesNextResourceHasVideoExist && NextResourceHasVideo;
            const BothResourcesHasVideo = FixedPreviousResourceHasVideo && FixedNextResourceHasVideo;
            const ResourceAudioBitrateDifference = BothResourcesHasVideo ? 0 : FixedNextResourceHasVideo ? -1 : 1;
            return ResourceAudioBitrateDifference;
        };
        const BestResources = VideoStructure.Resources.sort((_prev, _next) => ResourceBitrateSort(_prev, _next)).sort((_prev, _next) => ResourceVideoSort(_prev, _next));
        this.Resource = {
            Best: BestResources[0],
            List: VideoStructure.Resources,
        };
        this.Settings = {
            IsLiveContent: VideoStructure.Settings.IsLiveContent,
            IsOwnerViewing: VideoStructure.Settings.IsOwnerViewing,
            IsPrivate: VideoStructure.Settings.IsPrivate,
            IsAgeRestricted: VideoStructure.Settings.IsAgeRestricted,
            IsFamilySafe: VideoStructure.Settings.IsFamilySafe,
            IsCrawlable: VideoStructure.Settings.IsCrawlable,
            IsUnlisted: VideoStructure.Settings.IsUnlisted,
            IsUnpluggedCorpus: VideoStructure.Settings.IsUnpluggedCorpus,
            HasYpcMetadata: VideoStructure.Settings.HasYpcMetadata,
            AllowRatings: VideoStructure.Settings.AllowRatings,
            AvailableCountries: VideoStructure.Settings.AvailableCountries,
        };
    }
    // TODO: JSDoc
    static __FormStructure(searchByIDQueryResults) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(searchByIDQueryResults, new Validator().Default.Array().Required().Length(3));
        const VideoResourceFilter = (resource, isLive) => {
            const DoesResourceAudioQualityExist = Validator.Soft(resource.audioQuality, new Validator().Default.String().Required().MinLength(1)).Status;
            const DoesResourceAudioSampleRateExist = Validator.Soft(resource.audioSampleRate, new Validator().Default.String().Required().MinLength(1)).Status;
            const DoesResourceAudioChannelExist = Validator.Soft(resource.audioChannels, new Validator().Default.Numeric().Number().Required().Integer().Min(0)).Status;
            const ResourceHasAudio = resource.hasAudio;
            const DoesResourceAudioExist = ResourceHasAudio || DoesResourceAudioQualityExist || DoesResourceAudioSampleRateExist || DoesResourceAudioChannelExist;
            const DoesResourceURLExist = Validator.Soft(resource.url, new Validator().Default.String().Required().MinLength(1)).Status;
            if (isLive) {
                const IsResourceLive = resource.isHLS;
                const IsResourceValid = DoesResourceURLExist && DoesResourceAudioExist && IsResourceLive;
                return IsResourceValid;
            }
            else {
                const IsResourceValid = DoesResourceURLExist && DoesResourceAudioExist;
                return IsResourceValid;
            }
        };
        const VideoStructureData = {
            ID: [],
            URL: [],
            Title: [],
            Description: [],
            Duration: [],
            Views: [],
            Date: {
                Publish: [new Date()],
                Upload: [new Date()],
            },
            Thumbnails: [],
            Related: {
                Videos: [],
            },
            Resources: [],
            Settings: {
                IsLiveContent: [],
                IsOwnerViewing: [],
                IsPrivate: [],
                IsAgeRestricted: [],
                IsFamilySafe: [],
                IsCrawlable: [],
                IsUnlisted: [],
                IsUnpluggedCorpus: [],
                HasYpcMetadata: [],
                AllowRatings: [],
                AvailableCountries: [],
            },
        };
        const VideoStructureDataValidator = {
            ID: new Validator().Default.String()
                .Required()
                .MinLength(1)
                .Custom((_) => YouTubeService.default.IsVideoID(_), (_) => []),
            URL: new Validator().Default.String()
                .Required()
                .MinLength(1)
                .Custom((_) => YouTubeService.default.IsVideoURL(_), (_) => []),
            Title: new Validator().Default.String().Required().MinLength(1),
            Description: new Validator().Default.String().MinLength(1),
            Duration: new Validator().Default.Numeric().Number().Required().Integer().Min(0),
            Views: new Validator().Default.Numeric().Number().Required().Integer().Min(0),
            Date: {
                Publish: new Validator().Default.Date().Required(),
                Upload: new Validator().Default.Date().Required(),
            },
            Thumbnails: new Validator().Default.Array()
                .Required()
                .Of(new Validator().Default.Object()
                .Required()
                .Exact({
                URL: new Validator().Default.String().Required().MinLength(1),
                Size: new Validator().Default.Object()
                    .Required()
                    .Exact({
                    Width: new Validator().Default.Numeric().Number().Required().Integer().Min(1),
                    Height: new Validator().Default.Numeric().Number().Required().Integer().Min(1),
                }),
            }))
                .MinLength(0),
            Related: {
                Videos: new Validator().Default.Array().Required().Of(new Validator().Default.String().Required().MinLength(1)).MinLength(0),
            },
            Resources: new Validator().Default.Array().Required().Of(new Validator().Default.Object().Required()).MinLength(1),
            Settings: {
                IsLiveContent: new Validator().Default.Boolean().Required(),
                IsOwnerViewing: new Validator().Default.Boolean().Required(),
                IsPrivate: new Validator().Default.Boolean().Required(),
                IsAgeRestricted: new Validator().Default.Boolean().Required(),
                IsFamilySafe: new Validator().Default.Boolean().Required(),
                IsCrawlable: new Validator().Default.Boolean().Required(),
                IsUnlisted: new Validator().Default.Boolean().Required(),
                IsUnpluggedCorpus: new Validator().Default.Boolean().Required(),
                HasYpcMetadata: new Validator().Default.Boolean().Required(),
                AllowRatings: new Validator().Default.Boolean().Required(),
                AvailableCountries: new Validator().Default.Array().Required().Of(new Validator().Default.String().Required().MinLength(1)),
            },
        };
        const VideoStructureValidator = new Validator().Default.Object()
            .Required()
            .Exact({
            ID: VideoStructureDataValidator.ID,
            URL: VideoStructureDataValidator.URL,
            Title: VideoStructureDataValidator.Title,
            Description: VideoStructureDataValidator.Description,
            Duration: VideoStructureDataValidator.Duration,
            Views: VideoStructureDataValidator.Views,
            Date: new Validator().Default.Object().Required().Exact({
                Publish: VideoStructureDataValidator.Date.Publish,
                Upload: VideoStructureDataValidator.Date.Upload,
            }),
            Thumbnails: VideoStructureDataValidator.Thumbnails,
            Related: new Validator().Default.Object().Required().Exact({
                Videos: VideoStructureDataValidator.Related.Videos,
            }),
            Resources: VideoStructureDataValidator.Resources,
            Settings: new Validator().Default.Object().Required().Exact({
                IsLiveContent: VideoStructureDataValidator.Settings.IsLiveContent,
                IsOwnerViewing: VideoStructureDataValidator.Settings.IsOwnerViewing,
                IsPrivate: VideoStructureDataValidator.Settings.IsPrivate,
                IsAgeRestricted: VideoStructureDataValidator.Settings.IsAgeRestricted,
                IsFamilySafe: VideoStructureDataValidator.Settings.IsFamilySafe,
                IsCrawlable: VideoStructureDataValidator.Settings.IsCrawlable,
                IsUnlisted: VideoStructureDataValidator.Settings.IsUnlisted,
                IsUnpluggedCorpus: VideoStructureDataValidator.Settings.IsUnpluggedCorpus,
                HasYpcMetadata: VideoStructureDataValidator.Settings.HasYpcMetadata,
                AllowRatings: VideoStructureDataValidator.Settings.AllowRatings,
                AvailableCountries: VideoStructureDataValidator.Settings.AvailableCountries,
            }),
        });
        const YTDLBasicVideoInfo = searchByIDQueryResults[0];
        const DoesYTDLBasicVideoInfoExist = !Validator.TypeGuard.Default.IsNullOrUndefined(YTDLBasicVideoInfo);
        if (DoesYTDLBasicVideoInfoExist) {
            const YTDLBasicVideoDetails = YTDLBasicVideoInfo.videoDetails;
            VideoStructureData.ID.push(YTDLBasicVideoDetails.videoId);
            VideoStructureData.URL.push(YTDLBasicVideoDetails.video_url);
            VideoStructureData.Title.push(YTDLBasicVideoDetails.title);
            VideoStructureData.Description.push(YTDLBasicVideoDetails.description);
            const VideoDuration = YTDLBasicVideoDetails.lengthSeconds;
            const DoesVideoDurationExist = !Validator.TypeGuard.Default.IsNullOrUndefined(VideoDuration);
            const IsVideoDurationValid = DoesVideoDurationExist && Validator.TypeGuard.Default.IsInteger(Number.parseInt(VideoDuration));
            const FixedVideoDuration = IsVideoDurationValid ? Number.parseInt(VideoDuration) * 1000 : 0;
            VideoStructureData.Duration.push(FixedVideoDuration);
            const VideoViews = YTDLBasicVideoDetails.viewCount;
            const DoesVideoViewsExist = !Validator.TypeGuard.Default.IsNullOrUndefined(VideoViews);
            const IsVideoViewsValid = DoesVideoViewsExist && Validator.TypeGuard.Default.IsInteger(Number.parseInt(VideoViews));
            const FixedVideoViews = IsVideoViewsValid ? Number.parseInt(VideoViews) : 0;
            VideoStructureData.Views.push(FixedVideoViews);
            const VideoPublishDate = YTDLBasicVideoDetails.publishDate;
            const DoesVideoPublishDateExist = !Validator.TypeGuard.Default.IsNullOrUndefined(VideoPublishDate);
            const IsVideoPublishDateValid = DoesVideoPublishDateExist && Validator.TypeGuard.Default.IsDate(new Date(VideoPublishDate));
            const FixedVideoPublishDate = IsVideoPublishDateValid ? new Date(VideoPublishDate) : new Date();
            VideoStructureData.Date.Publish.push(FixedVideoPublishDate);
            const VideoUploadDate = YTDLBasicVideoDetails.uploadDate;
            const DoesVideoUploadDateExist = !Validator.TypeGuard.Default.IsNullOrUndefined(VideoUploadDate);
            const IsVideoUploadDateValid = DoesVideoUploadDateExist && Validator.TypeGuard.Default.IsDate(new Date(VideoUploadDate));
            const FixedVideoUploadDate = IsVideoUploadDateValid ? new Date(VideoUploadDate) : new Date();
            VideoStructureData.Date.Upload.push(FixedVideoUploadDate);
            VideoStructureData.Thumbnails.push(Validator.TypeGuard.Default.IsArray(YTDLBasicVideoDetails.thumbnails)
                ? GlobalModule.Functions.Parameter.Type.Manager.Default.Array.Copy(YTDLBasicVideoDetails.thumbnails)
                    .sort((_a, _b) => _b.width - _a.width)
                    .filter((_el, _ind, _arr) => {
                    const ThumbnailURL = _el.url;
                    const DoesThumbnailURLExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ThumbnailURL);
                    const IsThumbnailValid = DoesThumbnailURLExist;
                    return IsThumbnailValid;
                })
                    .map((_el, _ind, _arr) => {
                    const Thumbnail = {
                        URL: _el.url,
                        Size: {
                            Width: _el.width,
                            Height: _el.height,
                        },
                    };
                    return Thumbnail;
                })
                : []);
            VideoStructureData.Related.Videos.push(YTDLBasicVideoInfo.related_videos.map((_el, _ind, _arr) => _el.id));
            const ContentLiveUpload = YTDLBasicVideoDetails.isLiveContent;
            const DoesContentLiveUploadExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ContentLiveUpload);
            const IsContentLiveUploadValid = DoesContentLiveUploadExist && Validator.TypeGuard.Default.IsBoolean(ContentLiveUpload);
            const FixedContentLiveUpload = IsContentLiveUploadValid ? ContentLiveUpload : false;
            const IsContentLive = FixedVideoDuration > 0 ? false : FixedContentLiveUpload;
            VideoStructureData.Settings.IsLiveContent.push(IsContentLive);
            const VideoResources = YTDLBasicVideoInfo.formats;
            const ValidVideoResources = VideoResources.filter((_el, _ind, _arr) => VideoResourceFilter(_el, IsContentLive));
            VideoStructureData.Resources.push(ValidVideoResources);
            VideoStructureData.Settings.IsOwnerViewing.push(YTDLBasicVideoDetails.isOwnerViewing);
            VideoStructureData.Settings.IsPrivate.push(YTDLBasicVideoDetails.isPrivate);
            VideoStructureData.Settings.IsAgeRestricted.push(YTDLBasicVideoDetails.age_restricted);
            VideoStructureData.Settings.IsFamilySafe.push(YTDLBasicVideoDetails.isFamilySafe);
            VideoStructureData.Settings.IsCrawlable.push(YTDLBasicVideoDetails.isCrawlable);
            VideoStructureData.Settings.IsUnlisted.push(YTDLBasicVideoDetails.isUnlisted);
            VideoStructureData.Settings.IsUnpluggedCorpus.push(YTDLBasicVideoDetails.isUnpluggedCorpus);
            VideoStructureData.Settings.HasYpcMetadata.push(YTDLBasicVideoDetails.hasYpcMetadata);
            VideoStructureData.Settings.AllowRatings.push(YTDLBasicVideoDetails.allowRatings);
            VideoStructureData.Settings.AvailableCountries.push(YTDLBasicVideoDetails.availableCountries);
        }
        const YTDLVideoInfo = searchByIDQueryResults[1];
        const DoesYTDLVideoInfoExist = !Validator.TypeGuard.Default.IsNullOrUndefined(YTDLVideoInfo);
        if (DoesYTDLVideoInfoExist) {
            const YTDLVideoDetails = YTDLVideoInfo.videoDetails;
            VideoStructureData.ID.push(YTDLVideoDetails.videoId);
            VideoStructureData.URL.push(YTDLVideoDetails.video_url);
            VideoStructureData.Title.push(YTDLVideoDetails.title);
            VideoStructureData.Description.push(YTDLVideoDetails.description);
            const VideoDuration = YTDLVideoDetails.lengthSeconds;
            const DoesVideoDurationExist = !Validator.TypeGuard.Default.IsNullOrUndefined(VideoDuration);
            const IsVideoDurationValid = DoesVideoDurationExist && Validator.TypeGuard.Default.IsInteger(Number.parseInt(VideoDuration));
            const FixedVideoDuration = IsVideoDurationValid ? Number.parseInt(VideoDuration) * 1000 : 0;
            VideoStructureData.Duration.push(FixedVideoDuration);
            const VideoViews = YTDLVideoDetails.viewCount;
            const DoesVideoViewsExist = !Validator.TypeGuard.Default.IsNullOrUndefined(VideoViews);
            const IsVideoViewsValid = DoesVideoViewsExist && Validator.TypeGuard.Default.IsInteger(Number.parseInt(VideoViews));
            const FixedVideoViews = IsVideoViewsValid ? Number.parseInt(VideoViews) : 0;
            VideoStructureData.Views.push(FixedVideoViews);
            const VideoPublishDate = YTDLVideoDetails.publishDate;
            const DoesVideoPublishDateExist = !Validator.TypeGuard.Default.IsNullOrUndefined(VideoPublishDate);
            const IsVideoPublishDateValid = DoesVideoPublishDateExist && Validator.TypeGuard.Default.IsDate(new Date(VideoPublishDate));
            const FixedVideoPublishDate = IsVideoPublishDateValid ? new Date(VideoPublishDate) : new Date();
            VideoStructureData.Date.Publish.push(FixedVideoPublishDate);
            const VideoUploadDate = YTDLVideoDetails.uploadDate;
            const DoesVideoUploadDateExist = !Validator.TypeGuard.Default.IsNullOrUndefined(VideoUploadDate);
            const IsVideoUploadDateValid = DoesVideoUploadDateExist && Validator.TypeGuard.Default.IsDate(new Date(VideoUploadDate));
            const FixedVideoUploadDate = IsVideoUploadDateValid ? new Date(VideoUploadDate) : new Date();
            VideoStructureData.Date.Upload.push(FixedVideoUploadDate);
            VideoStructureData.Thumbnails.push(Validator.TypeGuard.Default.IsArray(YTDLVideoDetails.thumbnails)
                ? GlobalModule.Functions.Parameter.Type.Manager.Default.Array.Copy(YTDLVideoDetails.thumbnails)
                    .sort((_a, _b) => _b.width - _a.width)
                    .filter((_el, _ind, _arr) => {
                    const ThumbnailURL = _el.url;
                    const DoesThumbnailURLExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ThumbnailURL);
                    const IsThumbnailValid = DoesThumbnailURLExist;
                    return IsThumbnailValid;
                })
                    .map((_el, _ind, _arr) => {
                    const Thumbnail = {
                        URL: _el.url,
                        Size: {
                            Width: _el.width,
                            Height: _el.height,
                        },
                    };
                    return Thumbnail;
                })
                : []);
            VideoStructureData.Related.Videos.push(YTDLVideoInfo.related_videos.map((_el, _ind, _arr) => _el.id));
            const ContentLiveUpload = YTDLVideoDetails.isLiveContent;
            const DoesContentLiveUploadExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ContentLiveUpload);
            const IsContentLiveUploadValid = DoesContentLiveUploadExist && Validator.TypeGuard.Default.IsBoolean(ContentLiveUpload);
            const FixedContentLiveUpload = IsContentLiveUploadValid ? ContentLiveUpload : false;
            const IsContentLive = FixedVideoDuration > 0 ? false : FixedContentLiveUpload;
            VideoStructureData.Settings.IsLiveContent.push(IsContentLive);
            const VideoResources = YTDLVideoInfo.formats;
            const ValidVideoResources = VideoResources.filter((_el, _ind, _arr) => VideoResourceFilter(_el, IsContentLive));
            VideoStructureData.Resources.push(ValidVideoResources);
            VideoStructureData.Settings.IsOwnerViewing.push(YTDLVideoDetails.isOwnerViewing);
            VideoStructureData.Settings.IsPrivate.push(YTDLVideoDetails.isPrivate);
            VideoStructureData.Settings.IsAgeRestricted.push(YTDLVideoDetails.age_restricted);
            VideoStructureData.Settings.IsFamilySafe.push(YTDLVideoDetails.isFamilySafe);
            VideoStructureData.Settings.IsCrawlable.push(YTDLVideoDetails.isCrawlable);
            VideoStructureData.Settings.IsUnlisted.push(YTDLVideoDetails.isUnlisted);
            VideoStructureData.Settings.IsUnpluggedCorpus.push(YTDLVideoDetails.isUnpluggedCorpus);
            VideoStructureData.Settings.HasYpcMetadata.push(YTDLVideoDetails.hasYpcMetadata);
            VideoStructureData.Settings.AllowRatings.push(YTDLVideoDetails.allowRatings);
            VideoStructureData.Settings.AvailableCountries.push(YTDLVideoDetails.availableCountries);
        }
        const YTSearchVideoInfo = searchByIDQueryResults[2];
        const DoesYTSearchVideoInfoExist = !Validator.TypeGuard.Default.IsNullOrUndefined(YTSearchVideoInfo);
        if (DoesYTSearchVideoInfoExist) {
            const YTSearchVideoDetails = YTSearchVideoInfo;
            VideoStructureData.ID.push(YTSearchVideoDetails.videoId);
            VideoStructureData.URL.push(YTSearchVideoDetails.url);
            VideoStructureData.Title.push(YTSearchVideoDetails.title);
            VideoStructureData.Description.push(YTSearchVideoDetails.description);
            const VideoDuration = YTSearchVideoDetails.duration.seconds;
            const DoesVideoDurationExist = !Validator.TypeGuard.Default.IsNullOrUndefined(VideoDuration);
            const IsVideoDurationValid = DoesVideoDurationExist && Validator.TypeGuard.Default.IsInteger(VideoDuration);
            const FixedVideoDuration = IsVideoDurationValid ? VideoDuration * 1000 : 0;
            VideoStructureData.Duration.push(FixedVideoDuration);
            const VideoViews = YTSearchVideoDetails.views;
            const DoesVideoViewsExist = !Validator.TypeGuard.Default.IsNullOrUndefined(VideoViews);
            const IsVideoViewsValid = DoesVideoViewsExist && Validator.TypeGuard.Default.IsInteger(VideoViews);
            const FixedVideoViews = IsVideoViewsValid ? VideoViews : 0;
            VideoStructureData.Views.push(FixedVideoViews);
            const VideoUploadDate = YTSearchVideoDetails.uploadDate;
            const DoesVideoUploadDateExist = !Validator.TypeGuard.Default.IsNullOrUndefined(VideoUploadDate);
            const IsVideoUploadDateValid = DoesVideoUploadDateExist && Validator.TypeGuard.Default.IsDate(new Date(VideoUploadDate));
            const FixedVideoUploadDate = IsVideoUploadDateValid ? new Date(VideoUploadDate) : new Date();
            VideoStructureData.Date.Upload.push(FixedVideoUploadDate);
        }
        const VideoStructure = {
            ID: Validator.GetOneOf(VideoStructureData.ID, VideoStructureDataValidator.ID),
            URL: Validator.GetOneOf(VideoStructureData.URL, VideoStructureDataValidator.URL),
            Title: Validator.GetOneOf(VideoStructureData.Title, VideoStructureDataValidator.Title),
            Description: Validator.GetOneOf(VideoStructureData.Description, VideoStructureDataValidator.Description),
            Duration: Validator.GetOneOf(VideoStructureData.Duration, VideoStructureDataValidator.Duration),
            Views: Validator.GetOneOf(VideoStructureData.Views, VideoStructureDataValidator.Views),
            Date: {
                Publish: Validator.GetOneOf(VideoStructureData.Date.Publish, VideoStructureDataValidator.Date.Publish),
                Upload: Validator.GetOneOf(VideoStructureData.Date.Upload, VideoStructureDataValidator.Date.Upload),
            },
            Thumbnails: Validator.GetOneOf(VideoStructureData.Thumbnails, VideoStructureDataValidator.Thumbnails),
            Related: {
                Videos: Validator.GetOneOf(VideoStructureData.Related.Videos, VideoStructureDataValidator.Related.Videos),
            },
            Resources: Validator.GetOneOf(VideoStructureData.Resources, VideoStructureDataValidator.Resources),
            Settings: {
                IsLiveContent: Validator.GetOneOf(VideoStructureData.Settings.IsLiveContent, VideoStructureDataValidator.Settings.IsLiveContent),
                IsOwnerViewing: Validator.GetOneOf(VideoStructureData.Settings.IsOwnerViewing, VideoStructureDataValidator.Settings.IsOwnerViewing),
                IsPrivate: Validator.GetOneOf(VideoStructureData.Settings.IsPrivate, VideoStructureDataValidator.Settings.IsPrivate),
                IsAgeRestricted: Validator.GetOneOf(VideoStructureData.Settings.IsAgeRestricted, VideoStructureDataValidator.Settings.IsAgeRestricted),
                IsFamilySafe: Validator.GetOneOf(VideoStructureData.Settings.IsFamilySafe, VideoStructureDataValidator.Settings.IsFamilySafe),
                IsCrawlable: Validator.GetOneOf(VideoStructureData.Settings.IsCrawlable, VideoStructureDataValidator.Settings.IsCrawlable),
                IsUnlisted: Validator.GetOneOf(VideoStructureData.Settings.IsUnlisted, VideoStructureDataValidator.Settings.IsUnlisted),
                IsUnpluggedCorpus: Validator.GetOneOf(VideoStructureData.Settings.IsUnpluggedCorpus, VideoStructureDataValidator.Settings.IsUnpluggedCorpus),
                HasYpcMetadata: Validator.GetOneOf(VideoStructureData.Settings.HasYpcMetadata, VideoStructureDataValidator.Settings.HasYpcMetadata),
                AllowRatings: Validator.GetOneOf(VideoStructureData.Settings.AllowRatings, VideoStructureDataValidator.Settings.AllowRatings),
                AvailableCountries: Validator.GetOneOf(VideoStructureData.Settings.AvailableCountries, VideoStructureDataValidator.Settings.AvailableCountries),
            },
        };
        Validator.Strict(VideoStructure, VideoStructureValidator);
        return VideoStructure;
    }
}
//# sourceMappingURL=__video.js.map