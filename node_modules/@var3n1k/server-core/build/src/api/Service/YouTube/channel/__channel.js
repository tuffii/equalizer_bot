import * as GlobalModule from '../../../../module/@module.js';
import * as YouTubeService from '../__api.js';
export default class YouTubeChannel {
    // TODO: JSDoc
    ID;
    // TODO: JSDoc
    URL;
    // TODO: JSDoc
    Name;
    // TODO: JSDoc
    User;
    // TODO: JSDoc
    Subscribers;
    // TODO: JSDoc
    Thumbnails;
    // TODO: JSDoc
    Settings;
    // TODO: JSDoc
    constructor(searchByIDQueryResults, searchByTitleQueryResults) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(searchByIDQueryResults, new Validator().Default.Array().Required().Length(4));
        Validator.Strict(searchByTitleQueryResults, new Validator().Default.Array().Required().Length(1));
        const ChannelStructure = YouTubeChannel.__FormStructure(searchByIDQueryResults, searchByTitleQueryResults);
        this.ID = ChannelStructure.ID;
        this.URL = ChannelStructure.URL;
        this.Name = ChannelStructure.Name;
        this.User = {
            URL: ChannelStructure.User.URL,
            Name: ChannelStructure.User.Name,
        };
        this.Subscribers = ChannelStructure.Subscribers;
        this.Thumbnails = ChannelStructure.Thumbnails;
        this.Settings = {
            IsVerified: ChannelStructure.Settings.IsVerified,
        };
    }
    // TODO: JSDoc
    static __FormStructure(searchByIDQueryResults, searchByTitleQueryResults) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(searchByIDQueryResults, new Validator().Default.Array().Required().Length(4));
        Validator.Strict(searchByTitleQueryResults, new Validator().Default.Array().Required().Length(1));
        const ChannelStructureData = {
            ID: [],
            URL: [],
            Name: [],
            User: {
                URL: [],
                Name: [],
            },
            Subscribers: [],
            Thumbnails: [],
            Settings: {
                IsVerified: [],
            },
        };
        const ChannelStructureDataValidator = {
            ID: new Validator().Default.String()
                .Required()
                .MinLength(1)
                .Custom((_) => YouTubeService.default.IsChannelID(_), (_) => []),
            URL: new Validator().Default.String()
                .Required()
                .MinLength(1)
                .Custom((_) => YouTubeService.default.IsChannelURL(_), (_) => []),
            Name: new Validator().Default.String().Required().MinLength(1),
            User: {
                URL: new Validator().Default.String()
                    .Required()
                    .MinLength(1)
                    .Custom((_) => YouTubeService.default.IsUserURL(_), (_) => []),
                Name: new Validator().Default.String().Required().MinLength(1),
            },
            Subscribers: new Validator().Default.Numeric().Number().Required().Integer().Min(0),
            Thumbnails: new Validator().Default.Array()
                .Required()
                .Of(new Validator().Default.Object()
                .Required()
                .Exact({
                URL: new Validator().Default.String().Required().MinLength(1),
                Size: new Validator().Default.Object()
                    .Required()
                    .Exact({
                    Width: new Validator().Default.Numeric().Number().Required().Integer().Min(1),
                    Height: new Validator().Default.Numeric().Number().Required().Integer().Min(1),
                }),
            }))
                .MinLength(0),
            Settings: {
                IsVerified: new Validator().Default.Boolean().Required(),
            },
        };
        const ChannelStructureValidator = new Validator().Default.Object()
            .Required()
            .Exact({
            ID: ChannelStructureDataValidator.ID,
            URL: ChannelStructureDataValidator.URL,
            Name: ChannelStructureDataValidator.Name,
            User: new Validator().Default.Object().Required().Exact({
                URL: ChannelStructureDataValidator.User.URL,
                Name: ChannelStructureDataValidator.User.Name,
            }),
            Subscribers: ChannelStructureDataValidator.Subscribers,
            Thumbnails: ChannelStructureDataValidator.Thumbnails,
            Settings: new Validator().Default.Object().Required().Exact({
                IsVerified: ChannelStructureDataValidator.Settings.IsVerified,
            }),
        });
        const YTDLCoreBasicChannelInfo = searchByIDQueryResults[0];
        const DoesYTDLCoreBasicChannelInfoExist = !Validator.TypeGuard.Default.IsNullOrUndefined(YTDLCoreBasicChannelInfo);
        if (DoesYTDLCoreBasicChannelInfoExist) {
            const YTDLCoreBasicChannelDetails = YTDLCoreBasicChannelInfo;
            const InitialChannelID = [YTDLCoreBasicChannelDetails.id];
            const InitialChannelURL = [YTDLCoreBasicChannelDetails.channel_url, YTDLCoreBasicChannelDetails.external_channel_url];
            const InitialChannelName = [YTDLCoreBasicChannelDetails.name];
            const InitialChannelUserURL = [YTDLCoreBasicChannelDetails.user_url];
            const InitialChannelUserName = [YTDLCoreBasicChannelDetails.user];
            const ChannelCredentials = YouTubeChannel.__FormChannelCredentials(InitialChannelID, InitialChannelURL, InitialChannelName, InitialChannelUserURL, InitialChannelUserName);
            ChannelStructureData.ID.push(...InitialChannelID, ...ChannelCredentials.ID);
            ChannelStructureData.URL.push(...InitialChannelURL, ...ChannelCredentials.URL);
            ChannelStructureData.Name.push(...InitialChannelName, ...ChannelCredentials.Name);
            ChannelStructureData.User.URL.push(...InitialChannelUserURL, ...ChannelCredentials.User.URL);
            ChannelStructureData.User.Name.push(...InitialChannelUserName, ...ChannelCredentials.User.Name);
            const ChannelSubscribers = YTDLCoreBasicChannelDetails.subscriber_count;
            const DoesChannelSubscriberExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ChannelSubscribers);
            const IsChannelSubscriberValid = DoesChannelSubscriberExist && Validator.TypeGuard.Default.IsInteger(ChannelSubscribers);
            const FixedChannelSubscribers = IsChannelSubscriberValid ? ChannelSubscribers : 0;
            ChannelStructureData.Subscribers.push(FixedChannelSubscribers);
            ChannelStructureData.Thumbnails.push(Validator.TypeGuard.Default.IsArray(YTDLCoreBasicChannelDetails.thumbnails)
                ? GlobalModule.Functions.Parameter.Type.Manager.Default.Array.Copy(YTDLCoreBasicChannelDetails.thumbnails)
                    .sort((_a, _b) => _b.width - _a.width)
                    .filter((_el, _ind, _arr) => {
                    const ThumbnailURL = _el.url;
                    const DoesThumbnailURLExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ThumbnailURL);
                    const IsThumbnailValid = DoesThumbnailURLExist;
                    return IsThumbnailValid;
                })
                    .map((_el, _ind, _arr) => {
                    const Thumbnail = {
                        URL: _el.url,
                        Size: {
                            Width: _el.width,
                            Height: _el.height,
                        },
                    };
                    return Thumbnail;
                })
                : []);
            ChannelStructureData.Settings.IsVerified.push(YTDLCoreBasicChannelDetails.verified);
        }
        const YTDLCoreChannelInfo = searchByIDQueryResults[1];
        const DoesYTDLCoreChannelInfoExist = !Validator.TypeGuard.Default.IsNullOrUndefined(YTDLCoreChannelInfo);
        if (DoesYTDLCoreChannelInfoExist) {
            const YTDLCoreChannelDetails = YTDLCoreChannelInfo;
            const InitialChannelID = [YTDLCoreChannelDetails.id];
            const InitialChannelURL = [YTDLCoreChannelDetails.channel_url, YTDLCoreChannelDetails.external_channel_url];
            const InitialChannelName = [YTDLCoreChannelDetails.name];
            const InitialChannelUserURL = [YTDLCoreChannelDetails.user_url];
            const InitialChannelUserName = [YTDLCoreChannelDetails.user];
            const ChannelCredentials = YouTubeChannel.__FormChannelCredentials(InitialChannelID, InitialChannelURL, InitialChannelName, InitialChannelUserURL, InitialChannelUserName);
            ChannelStructureData.ID.push(...InitialChannelID, ...ChannelCredentials.ID);
            ChannelStructureData.URL.push(...InitialChannelURL, ...ChannelCredentials.URL);
            ChannelStructureData.Name.push(...InitialChannelName, ...ChannelCredentials.Name);
            ChannelStructureData.User.URL.push(...InitialChannelUserURL, ...ChannelCredentials.User.URL);
            ChannelStructureData.User.Name.push(...InitialChannelUserName, ...ChannelCredentials.User.Name);
            const ChannelSubscribers = YTDLCoreChannelDetails.subscriber_count;
            const DoesChannelSubscriberExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ChannelSubscribers);
            const IsChannelSubscriberValid = DoesChannelSubscriberExist && Validator.TypeGuard.Default.IsInteger(ChannelSubscribers);
            const FixedChannelSubscribers = IsChannelSubscriberValid ? ChannelSubscribers : 0;
            ChannelStructureData.Subscribers.push(FixedChannelSubscribers);
            ChannelStructureData.Thumbnails.push(Validator.TypeGuard.Default.IsArray(YTDLCoreChannelDetails.thumbnails)
                ? GlobalModule.Functions.Parameter.Type.Manager.Default.Array.Copy(YTDLCoreChannelDetails.thumbnails)
                    .sort((_a, _b) => _b.width - _a.width)
                    .filter((_el, _ind, _arr) => {
                    const ThumbnailURL = _el.url;
                    const DoesThumbnailURLExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ThumbnailURL);
                    const IsThumbnailValid = DoesThumbnailURLExist;
                    return IsThumbnailValid;
                })
                    .map((_el, _ind, _arr) => {
                    const Thumbnail = {
                        URL: _el.url,
                        Size: {
                            Width: _el.width,
                            Height: _el.height,
                        },
                    };
                    return Thumbnail;
                })
                : []);
            ChannelStructureData.Settings.IsVerified.push(YTDLCoreChannelDetails.verified);
        }
        const YTSearchChannelInfo = searchByIDQueryResults[2];
        const DoesYTSearchChannelInfoExist = !Validator.TypeGuard.Default.IsNullOrUndefined(YTSearchChannelInfo);
        if (DoesYTSearchChannelInfoExist) {
            const YTSearchChannelDetails = YTSearchChannelInfo;
            const InitialChannelID = [];
            const InitialChannelURL = [YTSearchChannelDetails.url];
            const InitialChannelName = [YTSearchChannelDetails.name];
            const InitialChannelUserURL = [YTSearchChannelDetails.url];
            const InitialChannelUserName = [YTSearchChannelDetails.name];
            const ChannelCredentials = YouTubeChannel.__FormChannelCredentials(InitialChannelID, InitialChannelURL, InitialChannelName, InitialChannelUserURL, InitialChannelUserName);
            ChannelStructureData.ID.push(...InitialChannelID, ...ChannelCredentials.ID);
            ChannelStructureData.URL.push(...InitialChannelURL, ...ChannelCredentials.URL);
            ChannelStructureData.Name.push(...InitialChannelName, ...ChannelCredentials.Name);
            ChannelStructureData.User.URL.push(...InitialChannelUserURL, ...ChannelCredentials.User.URL);
            ChannelStructureData.User.Name.push(...InitialChannelUserName, ...ChannelCredentials.User.Name);
        }
        const YTChannelInfo = searchByIDQueryResults[3];
        const DoesYTChannelInfoExist = !Validator.TypeGuard.Default.IsNullOrUndefined(YTChannelInfo);
        if (DoesYTChannelInfoExist) {
            const YTChanneDetails = YTChannelInfo;
            const InitialChannelID = [YTChanneDetails.authorId];
            const InitialChannelURL = [];
            const InitialChannelName = [YTChanneDetails.author];
            const InitialChannelUserURL = [YTChanneDetails.authorUrl];
            const InitialChannelUserName = [];
            const ChannelCredentials = YouTubeChannel.__FormChannelCredentials(InitialChannelID, InitialChannelURL, InitialChannelName, InitialChannelUserURL, InitialChannelUserName);
            ChannelStructureData.ID.push(...InitialChannelID, ...ChannelCredentials.ID);
            ChannelStructureData.URL.push(...InitialChannelURL, ...ChannelCredentials.URL);
            ChannelStructureData.Name.push(...InitialChannelName, ...ChannelCredentials.Name);
            ChannelStructureData.User.URL.push(...InitialChannelUserURL, ...ChannelCredentials.User.URL);
            ChannelStructureData.User.Name.push(...InitialChannelUserName, ...ChannelCredentials.User.Name);
            const ChannelSubscribers = YTChanneDetails.subscriberCount;
            const DoesChannelSubscriberExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ChannelSubscribers);
            const IsChannelSubscriberValid = DoesChannelSubscriberExist && Validator.TypeGuard.Default.IsInteger(ChannelSubscribers);
            const FixedChannelSubscribers = IsChannelSubscriberValid ? ChannelSubscribers : 0;
            ChannelStructureData.Subscribers.push(FixedChannelSubscribers);
            ChannelStructureData.Thumbnails.push(Validator.TypeGuard.Default.IsArray(YTChanneDetails.authorThumbnails)
                ? GlobalModule.Functions.Parameter.Type.Manager.Default.Array.Copy(YTChanneDetails.authorThumbnails)
                    .sort((_a, _b) => _b.width - _a.width)
                    .filter((_el, _ind, _arr) => {
                    const ThumbnailURL = _el.url;
                    const DoesThumbnailURLExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ThumbnailURL);
                    const IsThumbnailValid = DoesThumbnailURLExist;
                    return IsThumbnailValid;
                })
                    .map((_el, _ind, _arr) => {
                    const Thumbnail = {
                        URL: _el.url,
                        Size: {
                            Width: _el.width,
                            Height: _el.height,
                        },
                    };
                    return Thumbnail;
                })
                : []);
            ChannelStructureData.Settings.IsVerified.push(YTChanneDetails.isVerified);
        }
        const YTSRChannelInfo = searchByTitleQueryResults[0];
        const DoesYTSRChannelInfoExist = !Validator.TypeGuard.Default.IsNullOrUndefined(YTSRChannelInfo);
        if (DoesYTSRChannelInfoExist) {
            const YTSRChannelDetails = YTSRChannelInfo;
            const InitialChannelID = [YTSRChannelDetails.channelID];
            const InitialChannelURL = [YTSRChannelDetails.url];
            const InitialChannelName = [YTSRChannelDetails.name];
            const InitialChannelUserURL = [YTSRChannelDetails.url];
            const InitialChannelUserName = [];
            const ChannelCredentials = YouTubeChannel.__FormChannelCredentials(InitialChannelID, InitialChannelURL, InitialChannelName, InitialChannelUserURL, InitialChannelUserName);
            ChannelStructureData.ID.push(...InitialChannelID, ...ChannelCredentials.ID);
            ChannelStructureData.URL.push(...InitialChannelURL, ...ChannelCredentials.URL);
            ChannelStructureData.Name.push(...InitialChannelName, ...ChannelCredentials.Name);
            ChannelStructureData.User.URL.push(...InitialChannelUserURL, ...ChannelCredentials.User.URL);
            ChannelStructureData.User.Name.push(...InitialChannelUserName, ...ChannelCredentials.User.Name);
            const ChannelSubscribers = YTSRChannelDetails.subscribers;
            const DoesChannelSubscriberExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ChannelSubscribers);
            const IsChannelSubscriberValid = DoesChannelSubscriberExist && Validator.TypeGuard.Default.IsInteger(Number.parseInt(ChannelSubscribers));
            const FixedChannelSubscribers = IsChannelSubscriberValid ? Number.parseInt(ChannelSubscribers) : 0;
            ChannelStructureData.Subscribers.push(FixedChannelSubscribers);
            ChannelStructureData.Thumbnails.push(Validator.TypeGuard.Default.IsArray(YTSRChannelDetails.avatars)
                ? GlobalModule.Functions.Parameter.Type.Manager.Default.Array.Copy(YTSRChannelDetails.avatars)
                    .sort((_a, _b) => _b.width - _a.width)
                    .filter((_el, _ind, _arr) => {
                    const ThumbnailURL = _el.url;
                    const DoesThumbnailURLExist = !Validator.TypeGuard.Default.IsNullOrUndefined(ThumbnailURL);
                    const IsThumbnailValid = DoesThumbnailURLExist;
                    return IsThumbnailValid;
                })
                    .map((_el, _ind, _arr) => {
                    const Thumbnail = {
                        URL: _el.url,
                        Size: {
                            Width: _el.width,
                            Height: _el.height,
                        },
                    };
                    return Thumbnail;
                })
                : []);
            ChannelStructureData.Settings.IsVerified.push(YTSRChannelDetails.verified);
        }
        const ChannelStructure = {
            ID: Validator.GetOneOf(ChannelStructureData.ID, ChannelStructureDataValidator.ID),
            URL: Validator.GetOneOf(ChannelStructureData.URL, ChannelStructureDataValidator.URL),
            Name: Validator.GetOneOf(ChannelStructureData.Name, ChannelStructureDataValidator.Name),
            User: {
                URL: Validator.GetOneOf(ChannelStructureData.User.URL, ChannelStructureDataValidator.User.URL),
                Name: Validator.GetOneOf(ChannelStructureData.User.Name, ChannelStructureDataValidator.User.Name),
            },
            Subscribers: Validator.GetOneOf(ChannelStructureData.Subscribers, ChannelStructureDataValidator.Subscribers),
            Thumbnails: Validator.GetOneOf(ChannelStructureData.Thumbnails, ChannelStructureDataValidator.Thumbnails),
            Settings: {
                IsVerified: Validator.GetOneOf(ChannelStructureData.Settings.IsVerified, ChannelStructureDataValidator.Settings.IsVerified),
            },
        };
        Validator.Strict(ChannelStructure, ChannelStructureValidator);
        return ChannelStructure;
    }
    // TODO: JSDoc
    static __FormChannelCredentials(id, url, name, userURL, userName) {
        const Validator = GlobalModule.Classes.Validator;
        Validator.Strict(id, new Validator().Default.Array().Required().Of(new Validator().Default.String()));
        Validator.Strict(url, new Validator().Default.Array().Required().Of(new Validator().Default.String()));
        Validator.Strict(name, new Validator().Default.Array().Required().Of(new Validator().Default.String()));
        Validator.Strict(userURL, new Validator().Default.Array().Required().Of(new Validator().Default.String()));
        Validator.Strict(userName, new Validator().Default.Array().Required().Of(new Validator().Default.String()));
        const CredentialsCollection = {
            ID: [],
            URL: [],
            Name: [],
            User: {
                URL: [],
                Name: [],
            },
        };
        const InitialChannelID = id.filter((_el, _ind, _arr) => !Validator.TypeGuard.Default.IsNullOrUndefined(_el));
        const ChannelID = InitialChannelID.filter((_el, _ind, _arr) => YouTubeService.default.IsChannelID(_el));
        const InitialChannelURL = url.filter((_el, _ind, _arr) => !Validator.TypeGuard.Default.IsNullOrUndefined(_el));
        const ChannelURL = InitialChannelURL.filter((_el, _ind, _arr) => YouTubeService.default.IsChannelURL(_el));
        const InitialChannelName = name.filter((_el, _ind, _arr) => !Validator.TypeGuard.Default.IsNullOrUndefined(_el));
        const ChannelName = InitialChannelName;
        const InitialChannelUserURL = userURL.filter((_el, _ind, _arr) => !Validator.TypeGuard.Default.IsNullOrUndefined(_el));
        const ChannelUserURL = InitialChannelUserURL.filter((_el, _ind, _arr) => YouTubeService.default.IsUserURL(_el));
        const InitialChannelUserName = userName.filter((_el, _ind, _arr) => !Validator.TypeGuard.Default.IsNullOrUndefined(_el));
        const ChannelUserName = InitialChannelUserName.filter((_el, _ind, _arr) => YouTubeService.default.IsUserName(_el));
        CredentialsCollection.ID.push(...ChannelID);
        CredentialsCollection.ID.push(...ChannelURL.map((_el, _ind, _arr) => YouTubeService.default.GetChannelID(_el)));
        CredentialsCollection.URL.push(...ChannelURL);
        CredentialsCollection.URL.push(...ChannelID.map((_el, _ind, _arr) => YouTubeService.default.FormChannelURL(_el)));
        CredentialsCollection.Name.push(...ChannelName);
        CredentialsCollection.User.URL.push(...ChannelUserURL);
        CredentialsCollection.User.URL.push(...ChannelUserName.map((_el, _ind, _arr) => YouTubeService.default.FormUserURL(_el)));
        CredentialsCollection.User.Name.push(...ChannelUserName);
        CredentialsCollection.User.Name.push(...ChannelUserURL.map((_el, _ind, _arr) => YouTubeService.default.GetUserName(_el)));
        const DoesChannelURLExist = !Validator.TypeGuard.Default.IsEmptyArray(CredentialsCollection.URL);
        if (!DoesChannelURLExist) {
            ;
            CredentialsCollection.URL.push(...CredentialsCollection.User.URL);
        }
        const DoesChannelUserURLExist = !Validator.TypeGuard.Default.IsEmptyArray(CredentialsCollection.User.URL);
        if (!DoesChannelUserURLExist) {
            ;
            CredentialsCollection.User.URL.push(...CredentialsCollection.URL);
        }
        return CredentialsCollection;
    }
}
//# sourceMappingURL=__channel.js.map