import * as GlobalModule from '../@module.js';
declare const DateDataSet: typeof GlobalModule.DataSet.Constants.Default.Date;
type PositiveIntegerList<Num extends number, List extends number[] = []> = List['length'] extends Num ? List[number] : PositiveIntegerList<Num, [...List, List['length']]>;
type PositiveIntegersInRange<From extends number, To extends number> = Exclude<PositiveIntegerList<To>, PositiveIntegerList<From>>;
type FullMonthName = (typeof DateDataSet.Month.Name)[keyof typeof DateDataSet.Month.Name]['Full']['Single']['1'];
type ShortMonthName = (typeof DateDataSet.Month.Name)[keyof typeof DateDataSet.Month.Name]['Short'];
type MonthNumber = keyof typeof DateDataSet.Month.Name;
type DayOfTheMonthNumber = PositiveIntegersInRange<1, 32>;
type FullDayOfTheWeekName = (typeof DateDataSet.Week.Day.Name)[keyof typeof DateDataSet.Week.Day.Name]['Full']['Single']['1'];
type ShortDayOfTheWeekName = (typeof DateDataSet.Week.Day.Name)[keyof typeof DateDataSet.Week.Day.Name]['Short'];
type WeekNumber = PositiveIntegersInRange<1, 7>;
type DayOfTheWeekNumber = keyof typeof DateDataSet.Week.Day.Name;
type HourNumber = PositiveIntegersInRange<0, 24>;
type MinuteNumber = PositiveIntegersInRange<0, 60>;
type SecondNumber = PositiveIntegersInRange<0, 60>;
type MillisecondNumber = PositiveIntegersInRange<0, 999> | 999;
type DateValue = number;
export interface IDateValues {
    readonly Year: {
        readonly Full: DateValue;
        readonly Part: DateValue;
    };
    readonly Month: {
        readonly Number: MonthNumber;
        readonly Name: {
            readonly Full: FullMonthName;
            readonly Short: ShortMonthName;
        };
    };
    readonly DayOfTheMonth: DayOfTheMonthNumber;
    readonly Week: WeekNumber;
    readonly DayOfTheWeek: {
        readonly Number: DayOfTheWeekNumber;
        readonly Name: {
            readonly Full: FullDayOfTheWeekName;
            readonly Short: ShortDayOfTheWeekName;
        };
    };
    readonly Hours: HourNumber;
    readonly Minutes: MinuteNumber;
    readonly Seconds: SecondNumber;
    readonly Milliseconds: MillisecondNumber;
}
export interface IDatesDifferenceValues {
    readonly Years: {
        readonly Total: DateValue;
        readonly Local: IDateValues['Year']['Full'];
    };
    readonly Months: {
        readonly Total: DateValue;
        readonly Local: IDateValues['Month']['Number'];
    };
    readonly Weeks: {
        readonly Total: DateValue;
        readonly Local: IDateValues['Week'];
    };
    readonly Days: {
        readonly Total: DateValue;
        readonly Local: IDateValues['DayOfTheMonth'];
    };
    readonly Hours: {
        readonly Total: DateValue;
        readonly Local: IDateValues['Hours'];
    };
    readonly Minutes: {
        readonly Total: DateValue;
        readonly Local: IDateValues['Minutes'];
    };
    readonly Seconds: {
        readonly Total: DateValue;
        readonly Local: IDateValues['Seconds'];
    };
    readonly Milliseconds: {
        readonly Total: DateValue;
        readonly Local: IDateValues['Milliseconds'];
    };
}
export {};
//# sourceMappingURL=date.d.ts.map