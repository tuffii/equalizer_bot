import * as GlobalModule from '../@module.js';
type ClassInstance = GlobalModule.Types.Class.Instance<GlobalModule.Types.Class.Declaration>;
type ClassMethodParameters = Array<any>;
type ClassMethodReturnValue = any;
type ClassMethod<SelfClass extends ClassInstance, MethodParameters extends ClassMethodParameters, ReturnValue extends ClassMethodReturnValue> = (this: SelfClass, ...parameters: MethodParameters) => ReturnValue;
type ClassMethodConstructor<SelfClass extends ClassInstance, MethodParameters extends ClassMethodParameters, ReturnValue extends ClassMethodReturnValue> = (callbackFunction: <InitialMethodReturnValue extends ReturnValue>(initialMethodCall: (...parameters: MethodParameters) => InitialMethodReturnValue, thisValue: SelfClass, ...parameters: MethodParameters) => InitialMethodReturnValue) => ClassMethod<SelfClass, MethodParameters, ReturnValue>;
type ClassMethodDecorator<SelfClass extends ClassInstance, MethodParameters extends ClassMethodParameters, ReturnValue extends ClassMethodReturnValue> = (target: ClassMethod<SelfClass, MethodParameters, ReturnValue>, context: ClassMethodDecoratorContext<SelfClass, ClassMethod<SelfClass, MethodParameters, ReturnValue>>) => ClassMethod<SelfClass, MethodParameters, ReturnValue>;
export default class Decorator {
    static Method<SelfClass extends ClassInstance, MethodParameters extends ClassMethodParameters, ReturnValue extends ClassMethodReturnValue, InitialClassMethod extends ClassMethod<SelfClass, MethodParameters, ReturnValue>, NewClassMethodConstructor extends ClassMethodConstructor<ClassInstance, ClassMethodParameters, ClassMethodReturnValue>, InitialClassMethodDecoratorContext extends ClassMethodDecoratorContext<ClassInstance, InitialClassMethod>, NewClassMethodDecorator extends ClassMethodDecorator<ClassInstance, ClassMethodParameters, ClassMethodReturnValue>>(callbackFunction: (initialMethod: InitialClassMethod, newMethodConstructor: NewClassMethodConstructor, methodContext: InitialClassMethodDecoratorContext) => InitialClassMethod): NewClassMethodDecorator;
}
export {};
//# sourceMappingURL=Decorator.d.ts.map