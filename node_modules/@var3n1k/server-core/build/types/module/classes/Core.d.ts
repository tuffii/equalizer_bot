import * as GlobalModule from '../@module.js';
declare const EventName: {
    readonly Init: "init";
};
interface IEventFunction {
    [EventName.Init]: () => GlobalModule.Types.Promise.Promisable<void>;
}
interface IStaticEventHandler {
    readonly Name: typeof EventName;
}
interface IEventHandler {
    readonly Emitter: GlobalModule.Classes.EventEmitter<IEventFunction>;
}
type AnyObject = GlobalModule.Types.Object.BaseObject;
export default class Core<Dependencies extends AnyObject, DataSet extends AnyObject, Functions extends AnyObject, Classes extends AnyObject> {
    static readonly Event: IStaticEventHandler;
    readonly Event: IEventHandler;
    readonly Process: typeof GlobalModule.Classes.Process;
    readonly Console: typeof GlobalModule.Classes.Console;
    readonly FileSystem: GlobalModule.Classes.FileSystem;
    readonly Dependencies: typeof GlobalModule.Dependencies & Dependencies;
    readonly DataSet: typeof GlobalModule.DataSet & DataSet;
    readonly Functions: typeof GlobalModule.Functions & Functions;
    readonly Classes: typeof GlobalModule.Classes & Classes;
    Init(initializationFunction: () => GlobalModule.Types.Promise.Promisable<void>): Promise<void>;
    constructor(dependencies: Dependencies | undefined, dataSet: DataSet | undefined, functions: Functions | undefined, classes: Classes | undefined, relativeEnvPaths: Array<string>);
    private __RegisterExitHandler;
    private __RegisterExceptionHandler;
    private __RegisterInitializationHandler;
    private __RegisterHandlers;
    private __RegisterProcess;
    private __RegisterConsole;
    private __RegisterMetrics;
    private __Init;
}
export {};
//# sourceMappingURL=Core.d.ts.map