import * as GlobalModule from '../@module.js';
type NodeConsole = typeof GlobalModule.Dependencies.Default.Node.process;
type ConsoleInputStream = NodeConsole['stdin'];
type ConsoleOutputStream = NodeConsole['stdout'];
type ConsoleErrorStream = NodeConsole['stderr'];
interface IConsoleStream {
    readonly Input: ConsoleInputStream;
    readonly Output: ConsoleOutputStream;
    readonly Error: ConsoleErrorStream;
}
interface IConsoleSize {
    readonly Width: number;
    readonly Height: number;
}
interface IConsoleSettings {
    readonly TimeTag: {
        FullYear: boolean;
        NamedMonth: boolean;
        Ms: boolean;
    };
    readonly Elements: {
        Compact: boolean;
    };
}
interface IReadonlyConsoleSettings {
    readonly TimeTag: {
        readonly FullYear: IConsoleSettings['TimeTag']['FullYear'];
        readonly NamedMonth: IConsoleSettings['TimeTag']['NamedMonth'];
        readonly Ms: IConsoleSettings['TimeTag']['Ms'];
    };
    readonly Elements: {
        readonly Compact: IConsoleSettings['Elements']['Compact'];
    };
}
interface IConsoleSettingsGetter {
    readonly Get: () => IReadonlyConsoleSettings;
    readonly Set: {
        readonly TimeTag: (useFullYear: IConsoleSettings['TimeTag']['FullYear'], useNamedMonth: IConsoleSettings['TimeTag']['NamedMonth'], useMs: IConsoleSettings['TimeTag']['Ms']) => void;
        readonly Elements: (compact: IConsoleSettings['Elements']['Compact']) => void;
    };
}
interface IConsoleCursorPosition {
    readonly Row: number;
    readonly Column: number;
}
interface IConsoleCursorGetter {
    readonly Get: () => Promise<IConsoleCursorPosition>;
    readonly Set: (row: IConsoleCursorPosition['Row'], column: IConsoleCursorPosition['Column']) => void;
    readonly Move: (rows: IConsoleCursorPosition['Row'], columns: IConsoleCursorPosition['Column']) => void;
}
interface IConsoleLogGetter {
    readonly Custom: (mark: boolean, timeTag: boolean, ...elements: Array<any>) => void;
    readonly Preset: {
        readonly Success: (...elements: Array<any>) => void;
        readonly Info: (...elements: Array<any>) => void;
        readonly Warn: (...elements: Array<any>) => void;
        readonly Error: <Critical extends boolean>(error: Error, isCritical: Critical) => Critical extends true ? never : void;
    };
}
interface IConsoleCleanerGetter {
    readonly Screen: {
        readonly Whole: () => void;
        readonly FromCurrentLine: () => void;
    };
    readonly Row: {
        readonly Left: () => void;
        readonly Whole: () => void;
        readonly Rigth: () => void;
    };
}
declare const EventName: {
    readonly Settings: {
        readonly Update: "settingsUpdate";
    };
    readonly Log: {
        readonly Custom: "logCustom";
        readonly Preset: {
            readonly Success: "logPresetSuccess";
            readonly Info: "logPresetInfo";
            readonly Warning: "logPresetWarning";
            readonly Error: "logPresetError";
        };
    };
};
interface IEventFunction {
    [EventName.Settings.Update]: (oldSettings: IReadonlyConsoleSettings, newSettings: IReadonlyConsoleSettings) => GlobalModule.Types.Promise.Promisable<void>;
    [EventName.Log.Custom]: (..._: Parameters<IConsoleLogGetter['Custom']>) => GlobalModule.Types.Promise.Promisable<void>;
    [EventName.Log.Preset.Success]: (..._: Parameters<IConsoleLogGetter['Preset']['Success']>) => GlobalModule.Types.Promise.Promisable<void>;
    [EventName.Log.Preset.Info]: (..._: Parameters<IConsoleLogGetter['Preset']['Info']>) => GlobalModule.Types.Promise.Promisable<void>;
    [EventName.Log.Preset.Warning]: (..._: Parameters<IConsoleLogGetter['Preset']['Warn']>) => GlobalModule.Types.Promise.Promisable<void>;
    [EventName.Log.Preset.Error]: (..._: Parameters<IConsoleLogGetter['Preset']['Error']>) => GlobalModule.Types.Promise.Promisable<void>;
}
interface IEventHandler {
    readonly Name: typeof EventName;
    readonly Emitter: GlobalModule.Classes.EventEmitter<IEventFunction>;
}
export default class Console {
    static readonly Event: IEventHandler;
    static readonly Stream: IConsoleStream;
    static readonly Size: IConsoleSize;
    static readonly Pattern: {
        readonly Cursor: {
            readonly Position: {
                readonly RegExp: RegExp;
                readonly Group: {
                    readonly Row: 1;
                    readonly Column: 2;
                };
            };
        };
    };
    private static readonly __Queue;
    private static readonly __Settings;
    static get Settings(): IConsoleSettingsGetter;
    static get Cursor(): IConsoleCursorGetter;
    static get Log(): IConsoleLogGetter;
    static get Clear(): IConsoleCleanerGetter;
    private static __GetSettingsCopy;
    private static __UpdateSettings;
    private static __FormatOutput;
    private static __CustomLog;
    private static __ClearCurrentLine;
    private static __ClearScreenFromCurrentLine;
    private static __GetCursorPosition;
    private static __SetCursor;
    private static __MoveCursor;
}
export {};
//# sourceMappingURL=Console.d.ts.map