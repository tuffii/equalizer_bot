interface IFileStructure {
    readonly Base: string;
    readonly Name: string;
    readonly Extension: string;
    readonly Path: {
        readonly Absolute: string;
        readonly Relative: string;
    };
    readonly Size: number;
}
interface IFolderStructure {
    readonly Name: string;
    readonly Path: {
        readonly Absolute: string;
        readonly Relative: string;
    };
    readonly Size: number;
    readonly Level: number;
    readonly Context: {
        readonly Folders: number;
        readonly Files: number;
    };
    readonly Files: Array<IFolderStructure | IFileStructure>;
}
export default class FileSystem {
    readonly Path: string;
    static FormatPath(anyPath: string): string;
    static GetPathFromRootDirectory(absoluteStartPath: string, relativeFinalPathParts: Array<string>): string;
    static DoesDirectoryExist(absolutePath: string): boolean;
    static DoesFileExist(absolutePath: string): boolean;
    static IsFileReachable(absolutePath: string): boolean;
    static IsFileReadable(absolutePath: string): boolean;
    static IsFileWriteable(absolutePath: string): boolean;
    GetPathFromRootDirectory(relativeFinalPathParts: Array<string>): string;
    DoesDirectoryExist(relativePath: string): boolean;
    DoesFileExist(relativePath: string): boolean;
    IsFileReachable(relativePath: string): boolean;
    IsFileReadable(relativePath: string): boolean;
    IsFileWriteable(relativePath: string): boolean;
    GetDepth(relativePath: string): number;
    GetFilesList(relativePath: string, pathsToInclude: Array<Array<RegExp>>, pathsToExclude: Array<Array<RegExp>>): Array<string>;
    GetModel(relativePath: string, pathsToInclude: Array<Array<RegExp>>, pathsToExclude: Array<Array<RegExp>>): IFolderStructure;
    Import(relativePath: string, pathsToInclude: Array<Array<RegExp>>, pathsToExclude: Array<Array<RegExp>>, moduleImport: (module: any, absolutePath: string) => Promise<void>): Promise<void>;
    constructor(absolutePath: string);
    private static __FormatPath;
    private static __GetPathFromRootDirectory;
    private static __DoesDirectoryExist;
    private static __DoesFileExist;
    private static __IsFileReachable;
    private static __IsFileReadable;
    private static __IsFileWriteable;
    private __GetPathFromRootDirectory;
    private __DoesDirectoryExist;
    private __DoesFileExist;
    private __IsFileReachable;
    private __IsFileReadable;
    private __IsFileWriteable;
    private __GetDepth;
    private __GetFilesList;
    private __GetModel;
    private __Import;
    private __GetFoldersList;
}
export {};
//# sourceMappingURL=FileSystem.d.ts.map