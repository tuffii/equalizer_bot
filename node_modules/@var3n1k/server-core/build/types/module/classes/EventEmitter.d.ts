import * as GlobalModule from '../@module.js';
type AnyNamedEventCallbackFunction = (...parameters: Array<any>) => GlobalModule.Types.Promise.Promisable<any>;
type AnyUnnamedEventCallbackFunction = (eventName: string, ...parameters: Array<any>) => GlobalModule.Types.Promise.Promisable<any>;
type EventConstructor = Record<string, any>;
export default class EventEmitter<Event extends EventConstructor> {
    private readonly __Events;
    GetListeners<EventKey extends keyof Event>(eventName: EventKey): Array<(...parameters: Parameters<Event[EventKey]>) => GlobalModule.Types.Promise.Promisable<ReturnType<Event[EventKey]>>>;
    GetListeners<AnyKey extends string>(eventName: Exclude<AnyKey, keyof Event>): Array<AnyNamedEventCallbackFunction>;
    ClearListeners<EventKey extends keyof Event>(eventName: EventKey): void;
    ClearListeners<AnyKey extends string>(eventName: Exclude<AnyKey, keyof Event>): void;
    RemoveListener<EventKey extends keyof Event>(eventName: EventKey, callback: (...parameters: Parameters<Event[EventKey]>) => GlobalModule.Types.Promise.Promisable<ReturnType<Event[EventKey]>>): void;
    RemoveListener<AnyKey extends string>(eventName: Exclude<AnyKey, keyof Event>, callback: AnyNamedEventCallbackFunction): void;
    On<EventKey extends keyof Event>(eventName: EventKey, callback: (...parameters: Parameters<Event[EventKey]>) => GlobalModule.Types.Promise.Promisable<ReturnType<Event[EventKey]>>): void;
    On<AnyKey extends string>(eventName: Exclude<AnyKey, keyof Event>, callback: AnyNamedEventCallbackFunction): void;
    Once<EventKey extends keyof Event>(eventName: EventKey, callback: (...parameters: Parameters<Event[EventKey]>) => GlobalModule.Types.Promise.Promisable<ReturnType<Event[EventKey]>>): void;
    Once<AnyKey extends string>(eventName: Exclude<AnyKey, keyof Event>, callback: AnyNamedEventCallbackFunction): void;
    OnAny(callback: AnyUnnamedEventCallbackFunction): void;
    OnceAny(callback: AnyUnnamedEventCallbackFunction): void;
    Emit<EventKey extends keyof Event>(eventName: EventKey, ...parameters: Parameters<Event[EventKey]>): Promise<Array<ReturnType<Event[EventKey]>>>;
    Emit<AnyKey extends string>(eventName: Exclude<AnyKey, keyof Event>, ...parameters: Array<any>): Promise<Array<any>>;
    constructor();
    private __GetListeners;
    private __ClearListeners;
    private __RemoveListener;
    private __GetEventEntities;
    private __DeclareNewEvent;
    private __TriggerEvent;
}
export {};
//# sourceMappingURL=EventEmitter.d.ts.map