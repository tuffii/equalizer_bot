import * as GlobalModule from '../@module.js';
type ValidatorParameterExtension = any;
type ValidationErrorMessage = Array<any>;
type ValidationFunction = (parameter: ValidatorParameterExtension) => boolean;
type ErrorConstructor<ValidatorParameters extends Array<ValidatorParameterExtension>, Result extends ValidatorParameterExtension> = (...parameters: ValidatorParameters) => Result;
type InvalidParameterErrorConstructor = ErrorConstructor<[parameter: ValidatorParameterExtension], globalThis.Error>;
type UnexpectedParameterErrorConstructor = ErrorConstructor<[...parameters: Array<ValidatorParameterExtension>], InvalidParameterErrorConstructor>;
interface IValidationResult {
    readonly Status: ReturnType<ValidationFunction>;
    readonly Error: ReturnType<InvalidParameterErrorConstructor> | undefined;
}
type BaseValidation = (parameter: ValidatorParameterExtension, formError: boolean) => IValidationResult;
interface IDefaultValidation {
    readonly Function: ValidationFunction;
    readonly Error: {
        readonly Type: {
            readonly Invalid: InvalidParameterErrorConstructor;
        };
        readonly Parameter: {
            readonly Unexpected: UnexpectedParameterErrorConstructor;
        };
    };
}
interface IValidation {
    readonly Function: {
        Main: BaseValidation;
        readonly Alternative: Array<BaseValidation>;
    };
    readonly Error: IDefaultValidation['Error'];
}
declare const TypeGuard: typeof GlobalModule.Functions.Parameter.Type.Guard;
declare const TypeError: typeof GlobalModule.Classes.Error.TypeError;
declare class BaseValidator<ValidatorParameter extends ValidatorParameterExtension> {
    static readonly TypeGuard: typeof TypeGuard;
    static readonly TypeError: {
        Any: (__: ValidationErrorMessage) => (_: unknown) => GlobalModule.Classes.Error.BaseError;
        Default: {
            Any: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_PARAMETER">;
                Unexpected: (__: ValidationErrorMessage) => (_: symbol) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_PARAMETER">;
            };
            Symbol: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_SYMBOL">;
                Unexpected: (__: ValidationErrorMessage) => (_: symbol) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_SYMBOL">;
            };
            String: {
                Base: {
                    Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_STRING">;
                    Unexpected: (__: ValidationErrorMessage) => (_: string) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_STRING">;
                    Expected: {
                        Length: {
                            MoreThan: (__: number) => (_: string) => GlobalModule.Classes.Error.TypeError<"EXPECTED_STRING_LENGTH_TO_BE_MORE_THAN">;
                            EqualTo: (__: number) => (_: string) => GlobalModule.Classes.Error.TypeError<"EXPECTED_STRING_LENGTH_TO_BE_EQUAL_TO">;
                            LessThan: (__: number) => (_: string) => GlobalModule.Classes.Error.TypeError<"EXPECTED_STRING_LENGTH_TO_BE_LESS_THAN">;
                        };
                    };
                };
            };
            Numeric: {
                Base: {
                    Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_NUMERIC">;
                    Unexpected: (__: ValidationErrorMessage) => (_: bigint | number) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_NUMERIC">;
                    Expected: {
                        Positive: (_: bigint | number) => GlobalModule.Classes.Error.TypeError<"EXPECTED_NUMERIC_VALUE_TO_BE_POSITIVE">;
                        Negative: (_: bigint | number) => GlobalModule.Classes.Error.TypeError<"EXPECTED_NUMERIC_VALUE_TO_BE_NEGATIVE">;
                        Value: {
                            MoreThan: (__: bigint | number) => (_: bigint | number) => GlobalModule.Classes.Error.TypeError<"EXPECTED_NUMERIC_VALUE_TO_BE_MORE_THAN">;
                            MoreThanOrEqual: (__: bigint | number) => (_: bigint | number) => GlobalModule.Classes.Error.TypeError<"EXPECTED_NUMERIC_VALUE_TO_BE_MORE_THAN_OR_EQUAL">;
                            EqualTo: (__: bigint | number) => (_: bigint | number) => GlobalModule.Classes.Error.TypeError<"EXPECTED_NUMERIC_VALUE_TO_BE_EQUAL_TO">;
                            LessThan: (__: bigint | number) => (_: bigint | number) => GlobalModule.Classes.Error.TypeError<"EXPECTED_NUMERIC_VALUE_TO_BE_LESS_THAN">;
                            LessThanOrEqual: (__: bigint | number) => (_: bigint | number) => GlobalModule.Classes.Error.TypeError<"EXPECTED_NUMERIC_VALUE_TO_BE_LESS_THAN_OR_EQUAL">;
                        };
                    };
                };
                BigInt: {
                    Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_BIGINT">;
                    Unexpected: (__: ValidationErrorMessage) => (_: bigint) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_BIGINT">;
                };
                Number: {
                    Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_NUMBER">;
                    Unexpected: (__: ValidationErrorMessage) => (_: number) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_NUMBER">;
                };
                Integer: {
                    Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_INTEGER">;
                    Unexpected: (__: ValidationErrorMessage) => (_: number) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_INTEGER">;
                };
            };
            Array: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_ARRAY">;
                Unexpected: (__: ValidationErrorMessage) => (_: ValidationErrorMessage) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_ARRAY">;
                Expected: {
                    Length: {
                        MoreThan: (__: number) => (_: ValidationErrorMessage) => GlobalModule.Classes.Error.TypeError<"EXPECTED_ARRAY_LENGTH_TO_BE_MORE_THAN">;
                        EqualTo: (__: number) => (_: ValidationErrorMessage) => GlobalModule.Classes.Error.TypeError<"EXPECTED_ARRAY_LENGTH_TO_BE_EQUAL_TO">;
                        LessThan: (__: number) => (_: ValidationErrorMessage) => GlobalModule.Classes.Error.TypeError<"EXPECTED_ARRAY_LENGTH_TO_BE_LESS_THAN">;
                    };
                    Depth: {
                        MoreThan: (__: number) => (_: ValidationErrorMessage) => GlobalModule.Classes.Error.TypeError<"EXPECTED_ARRAY_DEPTH_TO_BE_MORE_THAN">;
                        EqualTo: (__: number) => (_: ValidationErrorMessage) => GlobalModule.Classes.Error.TypeError<"EXPECTED_ARRAY_DEPTH_TO_BE_EQUAL_TO">;
                        LessThan: (__: number) => (_: ValidationErrorMessage) => GlobalModule.Classes.Error.TypeError<"EXPECTED_ARRAY_DEPTH_TO_BE_LESS_THAN">;
                    };
                };
            };
            Object: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_OBJECT">;
                Unexpected: (__: ValidationErrorMessage) => (_: GlobalModule.Types.Object.BaseObject) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_OBJECT">;
                Expected: {
                    Size: {
                        MoreThan: (__: number) => (_: GlobalModule.Types.Object.BaseObject) => GlobalModule.Classes.Error.TypeError<"EXPECTED_OBJECT_SIZE_TO_BE_MORE_THAN">;
                        EqualTo: (__: number) => (_: GlobalModule.Types.Object.BaseObject) => GlobalModule.Classes.Error.TypeError<"EXPECTED_OBJECT_SIZE_TO_BE_EQUAL_TO">;
                        LessThan: (__: number) => (_: GlobalModule.Types.Object.BaseObject) => GlobalModule.Classes.Error.TypeError<"EXPECTED_OBJECT_SIZE_TO_BE_LESS_THAN">;
                    };
                    Depth: {
                        MoreThan: (__: number) => (_: GlobalModule.Types.Object.BaseObject) => GlobalModule.Classes.Error.TypeError<"EXPECTED_OBJECT_DEPTH_TO_BE_MORE_THAN">;
                        EqualTo: (__: number) => (_: GlobalModule.Types.Object.BaseObject) => GlobalModule.Classes.Error.TypeError<"EXPECTED_OBJECT_DEPTH_TO_BE_EQUAL_TO">;
                        LessThan: (__: number) => (_: GlobalModule.Types.Object.BaseObject) => GlobalModule.Classes.Error.TypeError<"EXPECTED_OBJECT_DEPTH_TO_BE_LESS_THAN">;
                    };
                    Keys: {
                        With: (__: Array<keyof GlobalModule.Types.Object.BaseObject>) => (_: GlobalModule.Types.Object.BaseObject) => GlobalModule.Classes.Error.TypeError<"EXPECTED_OBJECT_WITH_KEYS">;
                        Of: (__: Array<keyof GlobalModule.Types.Object.BaseObject>) => (_: GlobalModule.Types.Object.BaseObject) => GlobalModule.Classes.Error.TypeError<"EXPECTED_OBJECT_OF_KEYS">;
                    };
                };
            };
            RegExp: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_REGEXP">;
                Unexpected: (__: ValidationErrorMessage) => (_: RegExp) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_REGEXP">;
                Expected: {
                    Global: (_: RegExp) => GlobalModule.Classes.Error.TypeError<"EXPECTED_REGEXP_TO_BE_GLOBAL">;
                    Multiline: (_: RegExp) => GlobalModule.Classes.Error.TypeError<"EXPECTED_REGEXP_TO_BE_MULTILINE">;
                    CaseIgnored: (_: RegExp) => GlobalModule.Classes.Error.TypeError<"EXPECTED_REGEXP_TO_BE_CASE_IGNORED">;
                };
            };
            Boolean: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_BOOLEAN">;
                Unexpected: (__: ValidationErrorMessage) => (_: boolean) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_BOOLEAN">;
            };
            Date: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_DATE">;
                Unexpected: (__: ValidationErrorMessage) => (_: Date) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_DATE">;
                Expected: {
                    NewerThan: (__: Date) => (_: Date) => GlobalModule.Classes.Error.TypeError<"EXPECTED_DATE_TO_BE_NEWER_THAN">;
                    NewerThanNow: (_: Date) => GlobalModule.Classes.Error.TypeError<"EXPECTED_DATE_TO_BE_NEWER_THAN_NOW">;
                    NewerThanOrEqual: (__: Date) => (_: Date) => GlobalModule.Classes.Error.TypeError<"EXPECTED_DATE_TO_BE_NEWER_THAN_OR_EQUAL">;
                    NewerThanOrEqualNow: (_: Date) => GlobalModule.Classes.Error.TypeError<"EXPECTED_DATE_TO_BE_NEWER_THAN_OR_EQUAL_NOW">;
                    OlderThan: (__: Date) => (_: Date) => GlobalModule.Classes.Error.TypeError<"EXPECTED_DATE_TO_BE_OLDER_THAN">;
                    OlderThanNow: (_: Date) => GlobalModule.Classes.Error.TypeError<"EXPECTED_DATE_TO_BE_OLDER_THAN_NOW">;
                    OlderThanOrEqual: (__: Date) => (_: Date) => GlobalModule.Classes.Error.TypeError<"EXPECTED_DATE_TO_BE_OLDER_THAN_OR_EQUAL">;
                    OlderThanOrEqualNow: (_: Date) => GlobalModule.Classes.Error.TypeError<"EXPECTED_DATE_TO_BE_OLDER_THAN_OR_EQUAL_NOW">;
                };
            };
            Function: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_FUNCTION">;
                Unexpected: (__: ValidationErrorMessage) => (_: (...parameters: ValidationErrorMessage) => any) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_FUNCTION">;
            };
            Error: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_ERROR">;
                Unexpected: (__: ValidationErrorMessage) => (_: Error) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_ERROR">;
            };
            Class: {
                Declaration: {
                    Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_CLASS_DECLARATION">;
                    Unexpected: (__: ValidationErrorMessage) => (_: GlobalModule.Types.Class.Declaration) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_CLASS_DECLARATION">;
                };
                Instance: {
                    Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_CLASS_INSTANCE">;
                    Unexpected: (__: ValidationErrorMessage) => (_: GlobalModule.Types.Class.Instance<GlobalModule.Types.Class.Declaration>) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_CLASS_INSTANCE">;
                    Expected: {
                        InstanceOf: (__: GlobalModule.Types.Class.Declaration) => (_: GlobalModule.Types.Class.Instance<GlobalModule.Types.Class.Declaration>) => GlobalModule.Classes.Error.TypeError<"EXPECTED_CLASS_INSTANCE_TO_BE_INSTANCE_OF">;
                    };
                };
            };
        };
        Custom: {
            Color: {
                HEX: {
                    Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_COLOR_HEX">;
                    Unexpected: (__: ValidationErrorMessage) => (_: GlobalModule.Types.Color.HEX) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_COLOR_HEX">;
                };
                RGB: {
                    Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_COLOR_RGB">;
                    Unexpected: (__: ValidationErrorMessage) => (_: GlobalModule.Types.Color.RGB) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_COLOR_RGB">;
                };
                RGBA: {
                    Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_COLOR_RGBA">;
                    Unexpected: (__: ValidationErrorMessage) => (_: [red: number, green: number, blue: number, alpha: number]) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_COLOR_RGBA">;
                };
            };
            FileSystem: {
                Any: {
                    Path: {
                        Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_PATH">;
                        Unexpected: (__: ValidationErrorMessage) => (_: string) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_PATH">;
                    };
                    URL: {
                        Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_PATH_URL">;
                        Unexpected: (__: ValidationErrorMessage) => (_: string) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_PATH_URL">;
                    };
                };
                File: {
                    Path: {
                        Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_FILE_PATH">;
                        Unexpected: (__: ValidationErrorMessage) => (_: string) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_FILE_PATH">;
                    };
                    URL: {
                        Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_FILE_PATH_URL">;
                        Unexpected: (__: ValidationErrorMessage) => (_: string) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_FILE_PATH_URL">;
                    };
                    DoesntExist: (_: string) => GlobalModule.Classes.Error.TypeError<"FILE_DOESNT_EXIST">;
                    Unreachable: (_: string) => GlobalModule.Classes.Error.TypeError<"UNREACHABLE_FILE">;
                    Unreadable: (_: string) => GlobalModule.Classes.Error.TypeError<"UNREADABLE_FILE">;
                    Unwriteable: (_: string) => GlobalModule.Classes.Error.TypeError<"UNWRITEABLE_FILE">;
                };
                Directory: {
                    Path: {
                        Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_DIRECTORY_PATH">;
                        Unexpected: (__: ValidationErrorMessage) => (_: string) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_DIRECTORY_PATH">;
                    };
                    URL: {
                        Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_DIRECTORY_PATH_URL">;
                        Unexpected: (__: ValidationErrorMessage) => (_: string) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_DIRECTORY_PATH_URL">;
                    };
                    DoesntExist: (_: string) => GlobalModule.Classes.Error.TypeError<"DIRECTORY_DOESNT_EXIST">;
                };
            };
            URL: {
                Base: {
                    Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_BASE_URL">;
                    Unexpected: (__: ValidationErrorMessage) => (_: string) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_BASE_URL">;
                };
            };
        };
    };
    protected readonly _Validation: IValidation;
    static GetFunction(validator: BaseValidator<any>): BaseValidation;
    Required(): this;
    In(valuesList: Array<ValidatorParameterExtension>): this;
    Or(validator: BaseValidator<any>): this;
    Custom(validationFunction: (parameter: ValidatorParameter) => boolean, validationErrorMessageConstructor: (parameter: ValidatorParameter) => ValidationErrorMessage): this;
    constructor(defaultValidationError: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
    protected _FormValidationResult(parameter: ValidatorParameterExtension, formError: boolean, status: boolean, previousValidation: IValidationResult, defaultValidation: IDefaultValidation, errorConstructor: InvalidParameterErrorConstructor): IValidationResult;
}
export type IBaseValidator<ValidatorParameter extends ValidatorParameterExtension> = BaseValidator<ValidatorParameter>;
type AnyValidatorParameterExtension = any;
declare class AnyValidator extends BaseValidator<AnyValidatorParameterExtension> {
    static readonly Default: {
        Function: (_: any) => true;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_PARAMETER">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: symbol) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_PARAMETER">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
}
type SymbolValidatorParameterExtension = symbol;
declare class SymbolValidator extends BaseValidator<SymbolValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Default.IsSymbol;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_SYMBOL">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: symbol) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_SYMBOL">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
}
type StringValidatorParameterExtension = string;
declare class StringValidator extends BaseValidator<StringValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Default.IsString;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_STRING">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: string) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_STRING">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
    Of(symbols: Array<StringValidatorParameterExtension>): this;
    StartsWith(symbolCombinations: Array<StringValidatorParameterExtension>): this;
    EndsWith(symbolCombinations: Array<StringValidatorParameterExtension>): this;
    Matches(patterns: Array<RegExpValidatorParameterExtension>): this;
    Length(length: StringValidatorParameterExtension['length']): this;
    MinLength(length: StringValidatorParameterExtension['length']): this;
    MaxLength(length: StringValidatorParameterExtension['length']): this;
    Spaces(length: StringValidatorParameterExtension['length']): this;
    MinSpaces(length: StringValidatorParameterExtension['length']): this;
    MaxSpaces(length: StringValidatorParameterExtension['length']): this;
    Rows(length: StringValidatorParameterExtension['length']): this;
    MinRows(length: StringValidatorParameterExtension['length']): this;
    MaxRows(length: StringValidatorParameterExtension['length']): this;
}
type NumericValidatorParameterExtension = BigIntValidatorParameterExtension | NumberValidatorParameterExtension;
declare class NumericValidator extends BaseValidator<NumericValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Default.IsNumeric;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_NUMERIC">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: number | bigint) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_NUMERIC">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
    BigInt(): BigIntValidator;
    Number(): NumberValidator;
}
type BigIntValidatorParameterExtension = bigint;
declare class BigIntValidator extends BaseValidator<BigIntValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Default.IsBigInt;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_BIGINT">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: bigint) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_BIGINT">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
    Positive(): this;
    Negative(): this;
    EqualTo(number: BigIntValidatorParameterExtension): this;
    Min(number: BigIntValidatorParameterExtension): this;
    MoreThan(number: BigIntValidatorParameterExtension): this;
    Max(number: BigIntValidatorParameterExtension): this;
    LessThan(number: BigIntValidatorParameterExtension): this;
}
type NumberValidatorParameterExtension = number;
declare class NumberValidator extends BaseValidator<NumberValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Default.IsNumber;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_NUMBER">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: number) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_NUMBER">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
    Integer(): this;
    Positive(): this;
    Negative(): this;
    EqualTo(number: NumberValidatorParameterExtension): this;
    Min(number: NumberValidatorParameterExtension): this;
    MoreThan(number: NumberValidatorParameterExtension): this;
    Max(number: NumberValidatorParameterExtension): this;
    LessThan(number: NumberValidatorParameterExtension): this;
}
type ArrayValidatorParameterExtension = Array<any>;
declare class ArrayValidator extends BaseValidator<ArrayValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Default.IsArray;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_ARRAY">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: ValidationErrorMessage) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_ARRAY">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
    Length(length: ArrayValidatorParameterExtension['length']): this;
    MinLength(length: ArrayValidatorParameterExtension['length']): this;
    MaxLength(length: ArrayValidatorParameterExtension['length']): this;
    Depth(depth: ReturnType<typeof GlobalModule.Functions.Parameter.Type.Manager.Default.Array.GetDepth>): this;
    MinDepth(depth: ReturnType<typeof GlobalModule.Functions.Parameter.Type.Manager.Default.Array.GetDepth>): this;
    MaxDepth(depth: ReturnType<typeof GlobalModule.Functions.Parameter.Type.Manager.Default.Array.GetDepth>): this;
    With(element: ValidatorParameterExtension): this;
    Of(validator: BaseValidator<any>): this;
    Exact(...validators: Array<BaseValidator<any>>): this;
}
type ObjectValidatorParameterExtension = GlobalModule.Types.Object.BaseObject;
declare class ObjectValidator extends BaseValidator<ObjectValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Default.IsObject;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_OBJECT">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: GlobalModule.Types.Object.BaseObject) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_OBJECT">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
    Size(size: ReturnType<typeof GlobalModule.Functions.Parameter.Type.Manager.Default.Object.GetProperties>['length']): this;
    MinSize(size: ReturnType<typeof GlobalModule.Functions.Parameter.Type.Manager.Default.Object.GetProperties>['length']): this;
    MaxSize(size: ReturnType<typeof GlobalModule.Functions.Parameter.Type.Manager.Default.Object.GetProperties>['length']): this;
    Depth(depth: ReturnType<typeof GlobalModule.Functions.Parameter.Type.Manager.Default.Object.GetDepth>): this;
    MinDepth(depth: ReturnType<typeof GlobalModule.Functions.Parameter.Type.Manager.Default.Object.GetDepth>): this;
    MaxDepth(depth: ReturnType<typeof GlobalModule.Functions.Parameter.Type.Manager.Default.Object.GetDepth>): this;
    WithKeys(keys: ReturnType<typeof GlobalModule.Functions.Parameter.Type.Manager.Default.Object.GetProperties>): this;
    OfKeys(keys: ReturnType<typeof GlobalModule.Functions.Parameter.Type.Manager.Default.Object.GetProperties>): this;
    Of(validator: BaseValidator<any>): this;
    With(object: Record<keyof ObjectValidatorParameterExtension, BaseValidator<any>>): this;
    Exact(object: Record<keyof ObjectValidatorParameterExtension, BaseValidator<any>>): this;
}
type RegExpValidatorParameterExtension = RegExp;
declare class RegExpValidator extends BaseValidator<RegExpValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Default.IsRegExp;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_REGEXP">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: RegExp) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_REGEXP">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
    Global(): this;
    Multiline(): this;
    CaseIgnored(): this;
}
type BooleanValidatorParameterExtension = boolean;
declare class BooleanValidator extends BaseValidator<BooleanValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Default.IsBoolean;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_BOOLEAN">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: boolean) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_BOOLEAN">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
}
type DateValidatorParameterExtension = Date;
declare class DateValidator extends BaseValidator<DateValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Default.IsDate;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_DATE">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: Date) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_DATE">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
    NewerThan(date: DateValidatorParameterExtension): this;
    NewerThanOrEqual(date: DateValidatorParameterExtension): this;
    OlderThan(date: DateValidatorParameterExtension): this;
    OlderThanOrEqual(date: DateValidatorParameterExtension): this;
    NewerThanNow(): this;
    NewerThanOrEqualNow(): this;
    OlderThanNow(): this;
    OlderThanOrEqualNow(): this;
}
type FunctionValidatorParameterExtension = (...parameters: Array<any>) => any;
declare class FunctionValidator extends BaseValidator<FunctionValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Default.IsFunction;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_FUNCTION">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: (...parameters: ValidationErrorMessage) => any) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_FUNCTION">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
}
type ErrorValidatorParameterExtension = Error;
declare class ErrorValidator extends BaseValidator<ErrorValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Default.IsError;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_ERROR">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: Error) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_ERROR">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
}
type ClassDeclarationValidatorParameterExtension = GlobalModule.Types.Class.Declaration;
declare class ClassDeclarationValidator extends BaseValidator<ClassDeclarationValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Default.Class.IsDeclaration;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_CLASS_DECLARATION">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: GlobalModule.Types.Class.Declaration) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_CLASS_DECLARATION">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
}
type ClassInstanceValidatorParameterExtension = GlobalModule.Types.Class.Instance<GlobalModule.Types.Class.Declaration>;
declare class ClassInstanceValidator extends BaseValidator<ClassInstanceValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Default.Class.IsInstance;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_CLASS_INSTANCE">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: any) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_CLASS_INSTANCE">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
    Of(declaration: ClassDeclarationValidatorParameterExtension): this;
}
type HEXColorValidatorParameterExtension = GlobalModule.Types.Color.HEX;
declare class HEXColorValidator extends BaseValidator<HEXColorValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Custom.Color.IsHEX;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_COLOR_HEX">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: `#${string}`) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_COLOR_HEX">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
}
type RGBColorValidatorParameterExtension = GlobalModule.Types.Color.RGB;
declare class RGBColorValidator extends BaseValidator<RGBColorValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Custom.Color.IsRGB;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_COLOR_RGB">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: GlobalModule.Types.Color.RGB) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_COLOR_RGB">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
}
type RGBAColorValidatorParameterExtension = GlobalModule.Types.Color.RGBA;
declare class RGBAColorValidator extends BaseValidator<RGBAColorValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Custom.Color.IsRGBA;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_COLOR_RGBA">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: [red: number, green: number, blue: number, alpha: number]) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_COLOR_RGBA">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
}
type FileSystemPathValidatorParameterExtension = string;
declare class FileSystemPathValidator extends BaseValidator<FileSystemPathValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Custom.FileSystem.IsPath;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_PATH">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: string) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_PATH">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
    File(): this;
    Directory(): this;
}
type FileSystemURLValidatorParameterExtension = string;
declare class FileSystemURLValidator extends BaseValidator<FileSystemURLValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Custom.FileSystem.IsPathURL;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_PATH_URL">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: string) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_PATH_URL">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
    File(): this;
    Directory(): this;
}
type FileSystemDirectoryValidatorParameterExtension = string;
declare class FileSystemDirectoryValidator extends BaseValidator<FileSystemDirectoryValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Custom.FileSystem.IsDirectoryPath;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_DIRECTORY_PATH">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: string) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_DIRECTORY_PATH">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
    Exist(): this;
}
type FileSystemFileValidatorParameterExtension = string;
declare class FileSystemFileValidator extends BaseValidator<FileSystemFileValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Custom.FileSystem.IsFilePath;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_FILE_PATH">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: string) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_FILE_PATH">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
    Exist(): this;
    Reachable(): this;
    Readable(): this;
    Writeable(): this;
}
type BaseURLValidatorParameterExtension = string;
declare class BaseURLValidator extends BaseValidator<BaseURLValidatorParameterExtension> {
    static readonly Default: {
        Function: typeof GlobalModule.Functions.Parameter.Type.Guard.Custom.URL.IsURL;
        Error: {
            Type: {
                Invalid: (_: unknown) => GlobalModule.Classes.Error.TypeError<"INVALID_BASE_URL">;
            };
            Parameter: {
                Unexpected: (__: ValidationErrorMessage) => (_: string) => GlobalModule.Classes.Error.TypeError<"UNEXPECTED_BASE_URL">;
            };
        };
    };
    constructor(defaultErrorConstructor: IValidation['Error'], mainValidation: IValidation['Function']['Main'], alternativeValidations: IValidation['Function']['Alternative']);
}
declare class BaseValidationInitter {
    protected readonly _AlternativeValidations: IValidation['Function']['Alternative'];
    constructor(alternativeValidations: IValidation['Function']['Alternative']);
}
interface IClassValidationInitter {
    readonly Declaration: () => ClassDeclarationValidator;
    readonly Instance: () => ClassInstanceValidator;
}
declare class ValidationInitter_Default extends BaseValidationInitter {
    constructor(alternativeValidations: IValidation['Function']['Alternative']);
    Any(): AnyValidator;
    Symbol(): SymbolValidator;
    String(): StringValidator;
    Numeric(): NumericValidator;
    Array(): ArrayValidator;
    Object(): ObjectValidator;
    RegExp(): RegExpValidator;
    Boolean(): BooleanValidator;
    Date(): DateValidator;
    Function(): FunctionValidator;
    Error(): ErrorValidator;
    readonly Class: IClassValidationInitter;
}
declare class ValidationInitter_Custom_Color extends BaseValidationInitter {
    constructor(alternativeValidations: IValidation['Function']['Alternative']);
    HEX(): HEXColorValidator;
    RGB(): RGBColorValidator;
    RGBA(): RGBAColorValidator;
}
declare class ValidationInitter_Custom_FileSystem_Location extends BaseValidationInitter {
    constructor(alternativeValidations: IValidation['Function']['Alternative']);
    Path(): FileSystemPathValidator;
    URL(): FileSystemURLValidator;
}
declare class ValidationInitter_Custom_FileSystem_Entity extends BaseValidationInitter {
    constructor(alternativeValidations: IValidation['Function']['Alternative']);
    Directory(): FileSystemDirectoryValidator;
    File(): FileSystemFileValidator;
}
declare class ValidationInitter_Custom_FileSystem extends BaseValidationInitter {
    readonly Location: ValidationInitter_Custom_FileSystem_Location;
    readonly Entity: ValidationInitter_Custom_FileSystem_Entity;
    constructor(alternativeValidations: IValidation['Function']['Alternative']);
}
declare class ValidationInitter_Custom_URL extends BaseValidationInitter {
    constructor(alternativeValidations: IValidation['Function']['Alternative']);
    Base(): BaseURLValidator;
}
type DefaultValidationInitter = ValidationInitter_Default;
interface ICustomValidationInitter {
    readonly Color: ValidationInitter_Custom_Color;
    readonly FileSystem: ValidationInitter_Custom_FileSystem;
    readonly URL: ValidationInitter_Custom_URL;
}
declare class ValidationInitter extends BaseValidationInitter {
    readonly Default: DefaultValidationInitter;
    readonly Custom: ICustomValidationInitter;
    constructor(alternativeValidations: IValidation['Function']['Alternative']);
}
interface IValidatorIs {
    readonly Base: (parameter: ValidatorParameterExtension) => parameter is BaseValidator<any>;
    readonly Default: {
        readonly Any: (parameter: ValidatorParameterExtension) => parameter is AnyValidator;
        readonly Symbol: (parameter: ValidatorParameterExtension) => parameter is SymbolValidator;
        readonly String: (parameter: ValidatorParameterExtension) => parameter is StringValidator;
        readonly Numeric: (parameter: ValidatorParameterExtension) => parameter is NumericValidator;
        readonly Array: (parameter: ValidatorParameterExtension) => parameter is ArrayValidator;
        readonly Object: (parameter: ValidatorParameterExtension) => parameter is ObjectValidator;
        readonly RegExp: (parameter: ValidatorParameterExtension) => parameter is RegExpValidator;
        readonly Boolean: (parameter: ValidatorParameterExtension) => parameter is BooleanValidator;
        readonly Date: (parameter: ValidatorParameterExtension) => parameter is DateValidator;
        readonly Function: (parameter: ValidatorParameterExtension) => parameter is FunctionValidator;
        readonly Error: (parameter: ValidatorParameterExtension) => parameter is ErrorValidator;
        readonly Class: {
            readonly Declaration: (parameter: ValidatorParameterExtension) => parameter is ClassDeclarationValidator;
            readonly Instance: (parameter: ValidatorParameterExtension) => parameter is ClassInstanceValidator;
        };
    };
    readonly Custom: {
        readonly Color: {
            readonly HEX: (parameter: ValidatorParameterExtension) => parameter is HEXColorValidator;
            readonly RGB: (parameter: ValidatorParameterExtension) => parameter is RGBColorValidator;
            readonly RGBA: (parameter: ValidatorParameterExtension) => parameter is RGBAColorValidator;
        };
        readonly FileSystem: {
            readonly Location: {
                readonly Path: (parameter: ValidatorParameterExtension) => parameter is FileSystemPathValidator;
                readonly URL: (parameter: ValidatorParameterExtension) => parameter is FileSystemURLValidator;
            };
            readonly Entity: {
                readonly Directory: (parameter: ValidatorParameterExtension) => parameter is FileSystemDirectoryValidator;
                readonly File: (parameter: ValidatorParameterExtension) => parameter is FileSystemFileValidator;
            };
        };
        readonly URL: {
            readonly Base: (parameter: ValidatorParameterExtension) => parameter is BaseURLValidator;
        };
    };
}
export default class Validator extends ValidationInitter {
    static readonly TypeGuard: typeof TypeGuard;
    static readonly TypeError: typeof TypeError;
    static readonly Is: IValidatorIs;
    private static __Init;
    static Strict(parameter: ValidatorParameterExtension, validator: BaseValidator<any>): void | never;
    static Soft(parameter: ValidatorParameterExtension, validator: BaseValidator<any>): IValidationResult;
    static GetOneOf<AnyValue extends any>(valuesArray: Array<AnyValue>, validator: GlobalModule.Types.Validator.BaseValidator<any>): AnyValue | undefined;
    static GetSomeOf<AnyValue extends any>(valuesArray: Array<AnyValue>, validator: GlobalModule.Types.Validator.BaseValidator<any>): Array<AnyValue>;
    constructor();
}
export {};
//# sourceMappingURL=Validator.d.ts.map