import * as GlobalModule from '../../../module/@module.js';
import { default as BaseAPI } from '../../BaseAPI.js';
import * as Channel from './channel/__channel.js';
import * as Video from './video/__video.js';
import * as Playlist from './playlist/__playlist.js';
export default class YouTubeService extends BaseAPI {
    private static readonly Pattern;
    static readonly TypeGuard: {
        readonly Channel: (parameter: unknown) => parameter is Channel.default;
        readonly Video: (parameter: unknown) => parameter is Video.default;
        readonly Playlist: (parameter: unknown) => parameter is Playlist.default;
    };
    static readonly Validator: {
        readonly Channel: () => GlobalModule.Types.Validator.BaseValidator<GlobalModule.Types.Class.Instance<GlobalModule.Types.Class.Declaration>>;
        readonly Video: () => GlobalModule.Types.Validator.BaseValidator<GlobalModule.Types.Class.Instance<GlobalModule.Types.Class.Declaration>>;
        readonly Playlist: () => GlobalModule.Types.Validator.BaseValidator<GlobalModule.Types.Class.Instance<GlobalModule.Types.Class.Declaration>>;
    };
    static IsVideoURL(url: string): boolean;
    static FormVideoURL(id: string): string;
    static IsVideoID(id: string): boolean;
    static GetVideoID(url: string): string;
    static IsPlaylistURL(url: string): boolean;
    static FormPlaylistURL(id: string): string;
    static IsPlaylistID(id: string): boolean;
    static GetPlaylistID(url: string): string;
    static IsAnyResourceURL(url: string): boolean;
    static IsChannelURL(url: string): boolean;
    static FormChannelURL(id: string): string;
    static IsChannelID(id: string): boolean;
    static GetChannelID(url: string): string;
    static IsUserURL(url: string): boolean;
    static FormUserURL(name: string): string;
    static IsUserName(name: string): boolean;
    static GetUserName(url: string): string;
    static SearchVideosByIDOrURL(videoIdOrURL: string): Promise<Array<Video.default>>;
    static SearchVideosByTitle(searchQuery: string, searchLimit: number): Promise<Array<Video.default>>;
    static SearchPlaylistsByIDOrURL(playlistIdOrURL: string): Promise<Array<Playlist.default>>;
    static SearchPlaylistsByTitle(searchQuery: string, searchLimit: number): Promise<Array<Playlist.default>>;
    private static __IsVideoURL;
    private static __FormVideoURL;
    private static __IsVideoID;
    private static __GetVideoID;
    private static __IsPlaylistURL;
    private static __FormPlaylistURL;
    private static __IsPlaylistID;
    private static __GetPlaylistID;
    private static __IsAnyResourceURL;
    private static __IsChannelURL;
    private static __FormChannelURL;
    private static __IsChannelID;
    private static __GetChannelID;
    private static __IsUserURL;
    private static __FormUserURL;
    private static __IsUserName;
    private static __GetUserName;
    private static __GetChannelsResourcesByName;
    private static __GetChannelResourceByID;
    private static __GetVideosResourcesByTitle;
    private static __GetVideoResourceByID;
    private static __SearchVideosByIDOrURL;
    private static __SearchVideosByTitle;
    private static __GetPlaylistsResourcesByTitle;
    private static __GetPlaylistResourceByID;
    private static __SearchPlaylistsByIDOrURL;
    private static __SearchPlaylistsByTitle;
}
//# sourceMappingURL=__api.d.ts.map