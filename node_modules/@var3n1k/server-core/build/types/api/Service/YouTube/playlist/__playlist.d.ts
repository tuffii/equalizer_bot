/// <reference types="yt-search" />
import * as Channel from '../channel/__channel.js';
import * as Video from '../video/__video.js';
import * as Dependencies from '../__dependencies.js';
export type YTPLCorePlaylistInfo = Dependencies.YTPLCore.Result;
export type YTSearchPlaylistInfo = Dependencies.YTSearch.PlaylistMetadataResult;
export type YTSRPlaylistInfo = Dependencies.YTSR.Playlist;
export type SearchByIDQueryResults = [YTPLCorePlaylistInfo | undefined, YTSearchPlaylistInfo | undefined];
export type SearchByTitleQueryResults = [YTSRPlaylistInfo | undefined];
interface IYouTubePlaylist {
    readonly ID: string;
    readonly URL: string;
    readonly Title: string;
    readonly Description: string | undefined;
    readonly Views: number;
    readonly Date: {
        readonly Update: Date;
    };
    readonly Thumbnails: Array<{
        readonly URL: string;
        readonly Size: {
            readonly Width: number;
            readonly Height: number;
        };
    }>;
}
export default class YouTubePlaylist {
    readonly ID: IYouTubePlaylist['ID'];
    readonly URL: IYouTubePlaylist['URL'];
    readonly Title: IYouTubePlaylist['Title'];
    readonly Description: IYouTubePlaylist['Description'];
    readonly Author: Channel.default;
    readonly Views: IYouTubePlaylist['Views'];
    readonly Date: {
        readonly Update: IYouTubePlaylist['Date']['Update'];
    };
    readonly Thumbnails: IYouTubePlaylist['Thumbnails'];
    readonly Videos: Array<Video.default>;
    constructor(searchByIDQueryResults: SearchByIDQueryResults, playlistAuthor: Channel.default, playlistVideos: Array<Video.default>);
    private static __FormStructure;
}
export {};
//# sourceMappingURL=__playlist.d.ts.map