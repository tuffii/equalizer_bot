import * as GlobalModule from '../../../../module/@module.js';
import * as HTTPWebServerAPI from '../__api.js';
type HTTPRequestEndpoint = HTTPWebServerAPI.IHTTPWebServerRequest['Destination']['Endpoint'];
type HTTPRequestCallback = (...parameters: Parameters<HTTPWebServerAPI.HTTPRequestCallback>) => GlobalModule.Types.Promise.Promisable<ReturnType<HTTPWebServerAPI.HTTPRequestCallback>>;
interface IHTTPRequestReceiver {
    readonly Get: (endpoint: HTTPRequestEndpoint, ...callbacks: Array<HTTPRequestCallback>) => void;
    readonly Post: (endpoint: HTTPRequestEndpoint, ...callbacks: Array<HTTPRequestCallback>) => void;
    readonly Patch: (endpoint: HTTPRequestEndpoint, ...callbacks: Array<HTTPRequestCallback>) => void;
    readonly Put: (endpoint: HTTPRequestEndpoint, ...callbacks: Array<HTTPRequestCallback>) => void;
    readonly Update: (endpoint: HTTPRequestEndpoint, ...callbacks: Array<HTTPRequestCallback>) => void;
    readonly Delete: (endpoint: HTTPRequestEndpoint, ...callbacks: Array<HTTPRequestCallback>) => void;
}
export declare const HTTPRequestMethod: {
    readonly Get: "GET";
    readonly Post: "POST";
    readonly Patch: "PATCH";
    readonly Put: "PUT";
    readonly Update: "UPDATE";
    readonly Delete: "DELETE";
};
export declare const HTTPResponseCodeName: Record<string | number, string>;
export default class Router {
    private readonly __Handlers;
    get On(): IHTTPRequestReceiver;
    Add(endpointPrefix: HTTPRequestEndpoint, routers: Array<Router>): void;
    Connect(api: HTTPWebServerAPI.default): void;
    constructor();
    private __Add;
    private __Connect;
    private __FormNewHTTPRequestHandler;
    private __IsEndpointMatched;
    private __RegisterRequestHandler;
    private __HandleRequest;
    private __HandleMethodRequests;
}
export {};
//# sourceMappingURL=__router.d.ts.map