/// <reference types="express" />
import * as GlobalModule from '../../../module/@module.js';
import * as BaseAPI from '../../BaseAPI.js';
import * as Router from './router/__router.js';
import * as Dependencies from './__dependencies.js';
type HTTPWebServerCreationFunction = typeof Dependencies.express;
type HTTPWebServer = ReturnType<HTTPWebServerCreationFunction>;
type HTTPRequest = typeof Dependencies.express.request;
export interface IHTTPWebServerRequest {
    readonly Entity: HTTPRequest;
    readonly Sender: {
        readonly IP: Exclude<HTTPRequest['ip'], null | undefined>;
        readonly Port: Exclude<HTTPRequest['socket']['remotePort'], null | undefined>;
    };
    readonly Connection: {
        readonly Protocol: Exclude<HTTPRequest['protocol'], null | undefined>;
        readonly IsSecure: Exclude<HTTPRequest['secure'], null | undefined>;
    };
    readonly Destination: {
        readonly URL: Exclude<HTTPRequest['url'], null | undefined>;
        readonly Endpoint: Exclude<HTTPRequest['path'], null | undefined>;
        readonly Query: Exclude<HTTPRequest['query'], null | undefined>;
    };
    readonly Headers: Exclude<HTTPRequest['headers'], null | undefined>;
    readonly Body: string;
}
type HTTPResponse = typeof Dependencies.express.response;
declare class HTTPWebServerResponder {
    private readonly __API;
    private readonly __InitialResponse;
    Text(code: number, responseHeaders: GlobalModule.Types.Object.BaseObject, responseData: string): Promise<void>;
    JSON(code: number, responseHeaders: GlobalModule.Types.Object.BaseObject, responseData: GlobalModule.Types.Object.BaseObject): Promise<void>;
    File(code: number, responseHeaders: GlobalModule.Types.Object.BaseObject, absoluteFilePath: string): Promise<void>;
    constructor(api: HTTPWebServerAPI, initialResponse: HTTPResponse);
    private __Text;
    private __JSON;
    private __File;
}
export interface IHTTPWebServerResponse {
    readonly Entity: HTTPResponse;
    readonly Responder: HTTPWebServerResponder;
}
export type HTTPRequestCallback = (request: IHTTPWebServerRequest, response: IHTTPWebServerResponse) => GlobalModule.Types.Promise.Promisable<void>;
interface IHTTPWebServerAPIHost {
    readonly Domain: string;
    readonly Port: number;
    readonly Connection: {
        readonly Remote: boolean;
        readonly Secure: boolean;
    };
}
interface IHTTPWebServerAPISource {
    readonly Client: {
        readonly Folder: string;
    };
}
interface IHTTPWebServerAPIRequest {
    readonly Method: typeof Router.HTTPRequestMethod;
}
interface IHTTPWebServerAPIResponse {
    readonly Code: {
        readonly Name: typeof Router.HTTPResponseCodeName;
    };
}
declare const EventName: {
    readonly Init: "init";
    readonly Request: {
        readonly Any: "requestAny";
        readonly Method: {
            readonly Get: "requestMethodGET";
            readonly Post: "requestMethodPOST";
            readonly Patch: "requestMethodPATCH";
            readonly Put: "requestMethodPUT";
            readonly Update: "requestMethodUPDATE";
            readonly Delete: "requestMethodDELETE";
        };
    };
};
interface IEventFunction {
    [EventName.Init]: () => GlobalModule.Types.Promise.Promisable<void>;
    [EventName.Request.Any]: (method: string, request: IHTTPWebServerRequest, response: IHTTPWebServerResponse) => GlobalModule.Types.Promise.Promisable<void>;
    [EventName.Request.Method.Get]: HTTPRequestCallback;
    [EventName.Request.Method.Post]: HTTPRequestCallback;
    [EventName.Request.Method.Patch]: HTTPRequestCallback;
    [EventName.Request.Method.Put]: HTTPRequestCallback;
    [EventName.Request.Method.Update]: HTTPRequestCallback;
    [EventName.Request.Method.Delete]: HTTPRequestCallback;
}
interface IStaticEventHandler {
    readonly Name: typeof EventName;
}
interface IEventHandler {
    readonly Emitter: GlobalModule.Classes.EventEmitter<IEventFunction>;
}
export * as Router from './router/__router.js';
export default class HTTPWebServerAPI extends BaseAPI.default {
    static readonly Event: IStaticEventHandler;
    readonly Event: IEventHandler;
    readonly Server: HTTPWebServer;
    readonly Host: IHTTPWebServerAPIHost;
    readonly Source: IHTTPWebServerAPISource;
    static readonly Request: IHTTPWebServerAPIRequest;
    static readonly Response: IHTTPWebServerAPIResponse;
    GetRequestBody(initialRequest: HTTPRequest): Promise<IHTTPWebServerRequest['Body'] | undefined>;
    Handle(...routers: Array<Router.default>): void;
    Init(): Promise<void>;
    constructor(isRemote: boolean, isSecure: boolean, domain: string, port: number, relativeClientFolder: string);
    private __Handle;
    private __RedirectRequest;
    private __GetRequestBody;
    private __RegisterRequestHandler;
    private __RegisterInitializationHandler;
    private __RegisterHandlers;
    private __RegisterMetrics;
    private __Init;
}
//# sourceMappingURL=__api.d.ts.map