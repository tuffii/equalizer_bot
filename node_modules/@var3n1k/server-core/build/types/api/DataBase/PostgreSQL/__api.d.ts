import * as GlobalModule from '../../../module/@module.js';
import { default as BaseAPI } from '../../BaseAPI.js';
import * as DataBases from './databases/__databases.js';
interface IPostgreSQLClient {
    readonly Credentials: {
        readonly User: {
            readonly Name: string;
            readonly Password: string;
        };
        readonly Connection: {
            readonly Host: {
                readonly Name: string;
                readonly Port: number;
            };
        };
    };
}
declare const EventName: {
    readonly DataBase: {
        readonly Table: {
            readonly Create: "databaseTableCreate";
            readonly Delete: "databaseTableDelete";
            readonly Validate: {
                readonly Existance: "databaseTableValidateExistance";
            };
            readonly Elements: {
                readonly Insert: "databaseTableElementsInsert";
                readonly Update: "databaseTableElementsUpdate";
                readonly Select: "databaseTableElementsSelect";
                readonly Delete: "databaseTableElementsDelete";
            };
        };
    };
};
interface IEventFunction {
    [EventName.DataBase.Table.Create]: (dataBaseName: string, tableName: string, tableFieldNames: Array<string>) => void;
    [EventName.DataBase.Table.Delete]: (dataBaseName: string, tableName: string, tableFieldNames: Array<string>) => void;
    [EventName.DataBase.Table.Validate.Existance]: (dataBaseName: string, tableName: string) => void;
    [EventName.DataBase.Table.Elements.Insert]: (dataBaseName: string, tableName: string, insertedElements: Array<any>) => void;
    [EventName.DataBase.Table.Elements.Update]: (dataBaseName: string, tableName: string, updatedElements: Array<any>) => void;
    [EventName.DataBase.Table.Elements.Select]: (dataBaseName: string, tableName: string, selectedElements: Array<any>) => void;
    [EventName.DataBase.Table.Elements.Delete]: (dataBaseName: string, tableName: string, deletedElements: Array<any>) => void;
}
interface IStaticEventHandler {
    readonly Name: typeof EventName;
}
interface IEventHandler {
    readonly Emitter: GlobalModule.Classes.EventEmitter<IEventFunction>;
}
export * as DataBases from './databases/__databases.js';
export default class PostgreSQLAPI extends BaseAPI {
    static readonly Event: IStaticEventHandler;
    readonly Event: IEventHandler;
    readonly Client: IPostgreSQLClient;
    Connect<DataBaseDeclaration extends typeof DataBases.BaseDataBase>(databaseDeclaration: DataBaseDeclaration, databaseName: string): InstanceType<DataBaseDeclaration>;
    constructor(user: string, password: string, hostName: string, port: number);
    private __Connect;
    private __RegisterHandlers;
    private __RegisterMetrics;
}
//# sourceMappingURL=__api.d.ts.map